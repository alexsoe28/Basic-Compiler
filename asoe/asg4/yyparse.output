Terminals unused in grammar

   ROOT
   NUMBER
   UNOP
   BINOP
   TOK_NEWSTRING
   TOK_INDEX
   TOK_IFELSE
   TOK_RETURNVOID
   TOK_NULL
   TOK_VARDECL
   TOK_BLOCK
   TOK_CALL
   DECLID
   TOK_FUNCTION
   TOK_PROTOTYPE
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ORD
   TOK_CHR
   TOK_ROOT
   TOK_PARAM
   BAD_TOK
   TOK_EXC
   '.'
   '!'


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structdef: TOK_STRUCT IDENT '{' structfields '}'
    9          | TOK_STRUCT IDENT '{' '}'

   10 structfields: type ';'
   11             | type ';' structfields

   12 type: plaintype IDENT
   13     | TOK_ARRAY '<' plaintype '>'

   14 plaintype: TOK_VOID
   15          | TOK_INT
   16          | TOK_STRING
   17          | TOK_PTR '<' TOK_STRUCT IDENT '>'

   18 function: ident '(' ')' block
   19         | ident '(' idents ')' block
   20         | ident '(' ')' ';'
   21         | ident '(' idents ')' ';'

   22 idents: ident
   23       | idents ',' ident

   24 ident: plaintype TOK_ARRAY IDENT
   25      | plaintype IDENT

   26 block: statements '}'
   27      | '{' '}'

   28 statements: '{' statement
   29           | statements statement

   30 statement: vardecl
   31          | block
   32          | while
   33          | ifelse
   34          | return
   35          | expr ';'
   36          | ';'

   37 vardecl: ident '=' expr ';'
   38        | ident ';'

   39 while: TOK_WHILE '(' expr ')' statement

   40 ifelse: TOK_IF '(' expr ')' statement
   41       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   42 return: TOK_RETURN ';'
   43       | TOK_RETURN expr ';'

   44 expr: expr '=' expr
   45     | expr TOK_EQ expr
   46     | expr TOK_NE expr
   47     | expr '<' expr
   48     | expr TOK_LE expr
   49     | expr '>' expr
   50     | expr TOK_GE expr
   51     | expr '+' expr
   52     | expr '-' expr
   53     | expr '*' expr
   54     | expr '/' expr
   55     | expr '%' expr
   56     | TOK_POS expr
   57     | TOK_NEG expr
   58     | TOK_NOT expr
   59     | alloc
   60     | call
   61     | '(' expr ')'
   62     | variable
   63     | constant

   64 alloc: TOK_ALLOC '<' TOK_STRUCT IDENT '>' '(' ')'
   65      | TOK_ALLOC '<' TOK_STRING '>' '(' expr ')'
   66      | TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

   67 call: params ')'
   68     | IDENT '(' ')'

   69 params: IDENT '(' expr
   70       | params ',' expr

   71 variable: IDENT
   72         | expr '[' expr ']'
   73         | expr TOK_ARROW IDENT

   74 constant: TOK_STRINGCON
   75         | TOK_CHARCON
   76         | TOK_INTCON
   77         | TOK_NULLPTR


Terminals, with rules where they appear

$end (0) 0
'!' (33)
'%' (37) 55
'(' (40) 18 19 20 21 39 40 41 61 64 65 66 68 69
')' (41) 18 19 20 21 39 40 41 61 64 65 66 67 68
'*' (42) 53
'+' (43) 51
',' (44) 23 70
'-' (45) 52
'.' (46)
'/' (47) 54
';' (59) 6 10 11 20 21 35 36 37 38 42 43
'<' (60) 13 17 47 64 65 66
'=' (61) 37 44
'>' (62) 13 17 49 64 65 66
'[' (91) 72
']' (93) 72
'{' (123) 8 9 27 28
'}' (125) 5 8 9 26 27
error (256) 5 6
ROOT (258)
IDENT (259) 8 9 12 17 24 25 64 68 69 71 73
NUMBER (260)
UNOP (261)
BINOP (262)
TOK_NEWSTRING (263)
TOK_INDEX (264)
TOK_IF (265) 40 41
TOK_ELSE (266) 41
TOK_IFELSE (267)
TOK_ALLOC (268) 64 65 66
TOK_NULLPTR (269) 77
TOK_WHILE (270) 39
TOK_RETURN (271) 42 43
TOK_RETURNVOID (272)
TOK_INT (273) 15
TOK_STRING (274) 16 65
TOK_STRUCT (275) 8 9 17 64
TOK_VOID (276) 14
TOK_NULL (277)
TOK_ARRAY (278) 13 24 66
TOK_VARDECL (279)
TOK_EQ (280) 45
TOK_NE (281) 46
TOK_LE (282) 48
TOK_GE (283) 50
TOK_NOT (284) 58
TOK_PTR (285) 17
TOK_BLOCK (286)
TOK_CALL (287)
DECLID (288)
TOK_FUNCTION (289)
TOK_PROTOTYPE (290)
TOK_POS (291) 56
TOK_NEG (292) 57
TOK_NEWARRAY (293)
TOK_TYPEID (294)
TOK_FIELD (295)
TOK_ORD (296)
TOK_CHR (297)
TOK_ROOT (298)
TOK_PARAM (299)
BAD_TOK (300)
TOK_EXC (301)
TOK_INTCON (302) 76
TOK_CHARCON (303) 75
TOK_STRINGCON (304) 74
TOK_ARROW (305) 73


Nonterminals, with rules where they appear

$accept (69)
    on left: 0
start (70)
    on left: 1, on right: 0
program (71)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (72)
    on left: 8 9, on right: 2
structfields (73)
    on left: 10 11, on right: 8 11
type (74)
    on left: 12 13, on right: 10 11
plaintype (75)
    on left: 14 15 16 17, on right: 12 13 24 25 66
function (76)
    on left: 18 19 20 21, on right: 3
idents (77)
    on left: 22 23, on right: 19 21 23
ident (78)
    on left: 24 25, on right: 18 19 20 21 22 23 37 38
block (79)
    on left: 26 27, on right: 18 19 31
statements (80)
    on left: 28 29, on right: 26 29
statement (81)
    on left: 30 31 32 33 34 35 36, on right: 4 28 29 39 40 41
vardecl (82)
    on left: 37 38, on right: 30
while (83)
    on left: 39, on right: 32
ifelse (84)
    on left: 40 41, on right: 33
return (85)
    on left: 42 43, on right: 34
expr (86)
    on left: 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61
    62 63, on right: 35 37 39 40 41 43 44 45 46 47 48 49 50 51 52 53
    54 55 56 57 58 61 65 66 69 70 72 73
alloc (87)
    on left: 64 65 66, on right: 59
call (88)
    on left: 67 68, on right: 60
params (89)
    on left: 69 70, on right: 67 70
variable (90)
    on left: 71 72 73, on right: 62
constant (91)
    on left: 74 75 76 77, on right: 63


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    IDENT          shift, and go to state 5
    TOK_IF         shift, and go to state 6
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_INT        shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_STRUCT     shift, and go to state 13
    TOK_VOID       shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_PTR        shift, and go to state 16
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    $end  reduce using rule 1 (start)

    structdef   go to state 25
    plaintype   go to state 26
    function    go to state 27
    ident       go to state 28
    block       go to state 29
    statements  go to state 30
    statement   go to state 31
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    alloc       go to state 37
    call        go to state 38
    params      go to state 39
    variable    go to state 40
    constant    go to state 41


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 42
    ';'  shift, and go to state 43


State 5

   68 call: IDENT . '(' ')'
   69 params: IDENT . '(' expr
   71 variable: IDENT .

    '('  shift, and go to state 44

    $default  reduce using rule 71 (variable)


State 6

   40 ifelse: TOK_IF . '(' expr ')' statement
   41       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 45


State 7

   64 alloc: TOK_ALLOC . '<' TOK_STRUCT IDENT '>' '(' ')'
   65      | TOK_ALLOC . '<' TOK_STRING '>' '(' expr ')'
   66      | TOK_ALLOC . '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 46


State 8

   77 constant: TOK_NULLPTR .

    $default  reduce using rule 77 (constant)


State 9

   39 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 47


State 10

   42 return: TOK_RETURN . ';'
   43       | TOK_RETURN . expr ';'

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22
    ';'            shift, and go to state 48

    expr      go to state 49
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 11

   15 plaintype: TOK_INT .

    $default  reduce using rule 15 (plaintype)


State 12

   16 plaintype: TOK_STRING .

    $default  reduce using rule 16 (plaintype)


State 13

    8 structdef: TOK_STRUCT . IDENT '{' structfields '}'
    9          | TOK_STRUCT . IDENT '{' '}'

    IDENT  shift, and go to state 50


State 14

   14 plaintype: TOK_VOID .

    $default  reduce using rule 14 (plaintype)


State 15

   58 expr: TOK_NOT . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 51
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 16

   17 plaintype: TOK_PTR . '<' TOK_STRUCT IDENT '>'

    '<'  shift, and go to state 52


State 17

   56 expr: TOK_POS . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 53
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 18

   57 expr: TOK_NEG . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 54
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 19

   76 constant: TOK_INTCON .

    $default  reduce using rule 76 (constant)


State 20

   75 constant: TOK_CHARCON .

    $default  reduce using rule 75 (constant)


State 21

   74 constant: TOK_STRINGCON .

    $default  reduce using rule 74 (constant)


State 22

   61 expr: '(' . expr ')'

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 55
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 23

   27 block: '{' . '}'
   28 statements: '{' . statement

    IDENT          shift, and go to state 5
    TOK_IF         shift, and go to state 6
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_INT        shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_VOID       shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_PTR        shift, and go to state 16
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    '}'            shift, and go to state 56
    ';'            shift, and go to state 24

    plaintype   go to state 26
    ident       go to state 57
    block       go to state 29
    statements  go to state 30
    statement   go to state 58
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    alloc       go to state 37
    call        go to state 38
    params      go to state 39
    variable    go to state 40
    constant    go to state 41


State 24

   36 statement: ';' .

    $default  reduce using rule 36 (statement)


State 25

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 26

   24 ident: plaintype . TOK_ARRAY IDENT
   25      | plaintype . IDENT

    IDENT      shift, and go to state 59
    TOK_ARRAY  shift, and go to state 60


State 27

    3 program: program function .

    $default  reduce using rule 3 (program)


State 28

   18 function: ident . '(' ')' block
   19         | ident . '(' idents ')' block
   20         | ident . '(' ')' ';'
   21         | ident . '(' idents ')' ';'
   37 vardecl: ident . '=' expr ';'
   38        | ident . ';'

    '('  shift, and go to state 61
    ';'  shift, and go to state 62
    '='  shift, and go to state 63


State 29

   31 statement: block .

    $default  reduce using rule 31 (statement)


State 30

   26 block: statements . '}'
   29 statements: statements . statement

    IDENT          shift, and go to state 5
    TOK_IF         shift, and go to state 6
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_INT        shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_VOID       shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_PTR        shift, and go to state 16
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    '}'            shift, and go to state 64
    ';'            shift, and go to state 24

    plaintype   go to state 26
    ident       go to state 57
    block       go to state 29
    statements  go to state 30
    statement   go to state 65
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    alloc       go to state 37
    call        go to state 38
    params      go to state 39
    variable    go to state 40
    constant    go to state 41


State 31

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 32

   30 statement: vardecl .

    $default  reduce using rule 30 (statement)


State 33

   32 statement: while .

    $default  reduce using rule 32 (statement)


State 34

   33 statement: ifelse .

    $default  reduce using rule 33 (statement)


State 35

   34 statement: return .

    $default  reduce using rule 34 (statement)


State 36

   35 statement: expr . ';'
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    ';'        shift, and go to state 72
    '='        shift, and go to state 73
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78
    '<'        shift, and go to state 79
    '>'        shift, and go to state 80


State 37

   59 expr: alloc .

    $default  reduce using rule 59 (expr)


State 38

   60 expr: call .

    $default  reduce using rule 60 (expr)


State 39

   67 call: params . ')'
   70 params: params . ',' expr

    ')'  shift, and go to state 81
    ','  shift, and go to state 82


State 40

   62 expr: variable .

    $default  reduce using rule 62 (expr)


State 41

   63 expr: constant .

    $default  reduce using rule 63 (expr)


State 42

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 43

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 44

   68 call: IDENT '(' . ')'
   69 params: IDENT '(' . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22
    ')'            shift, and go to state 83

    expr      go to state 84
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 45

   40 ifelse: TOK_IF '(' . expr ')' statement
   41       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 85
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 46

   64 alloc: TOK_ALLOC '<' . TOK_STRUCT IDENT '>' '(' ')'
   65      | TOK_ALLOC '<' . TOK_STRING '>' '(' expr ')'
   66      | TOK_ALLOC '<' . TOK_ARRAY '<' plaintype '>' '>' '(' expr ')'

    TOK_STRING  shift, and go to state 86
    TOK_STRUCT  shift, and go to state 87
    TOK_ARRAY   shift, and go to state 88


State 47

   39 while: TOK_WHILE '(' . expr ')' statement

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 89
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 48

   42 return: TOK_RETURN ';' .

    $default  reduce using rule 42 (return)


State 49

   43 return: TOK_RETURN expr . ';'
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    ';'        shift, and go to state 90
    '='        shift, and go to state 73
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78
    '<'        shift, and go to state 79
    '>'        shift, and go to state 80


State 50

    8 structdef: TOK_STRUCT IDENT . '{' structfields '}'
    9          | TOK_STRUCT IDENT . '{' '}'

    '{'  shift, and go to state 91


State 51

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   58     | TOK_NOT expr .
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71

    $default  reduce using rule 58 (expr)


State 52

   17 plaintype: TOK_PTR '<' . TOK_STRUCT IDENT '>'

    TOK_STRUCT  shift, and go to state 92


State 53

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   56     | TOK_POS expr .
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71

    $default  reduce using rule 56 (expr)


State 54

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   57     | TOK_NEG expr .
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71

    $default  reduce using rule 57 (expr)


State 55

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   61     | '(' expr . ')'
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    TOK_ARROW  shift, and go to state 70
    ')'        shift, and go to state 93
    '['        shift, and go to state 71
    '='        shift, and go to state 73
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78
    '<'        shift, and go to state 79
    '>'        shift, and go to state 80


State 56

   27 block: '{' '}' .

    $default  reduce using rule 27 (block)


State 57

   37 vardecl: ident . '=' expr ';'
   38        | ident . ';'

    ';'  shift, and go to state 62
    '='  shift, and go to state 63


State 58

   28 statements: '{' statement .

    $default  reduce using rule 28 (statements)


State 59

   25 ident: plaintype IDENT .

    $default  reduce using rule 25 (ident)


State 60

   24 ident: plaintype TOK_ARRAY . IDENT

    IDENT  shift, and go to state 94


State 61

   18 function: ident '(' . ')' block
   19         | ident '(' . idents ')' block
   20         | ident '(' . ')' ';'
   21         | ident '(' . idents ')' ';'

    TOK_INT     shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_VOID    shift, and go to state 14
    TOK_PTR     shift, and go to state 16
    ')'         shift, and go to state 95

    plaintype  go to state 26
    idents     go to state 96
    ident      go to state 97


State 62

   38 vardecl: ident ';' .

    $default  reduce using rule 38 (vardecl)


State 63

   37 vardecl: ident '=' . expr ';'

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 98
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 64

   26 block: statements '}' .

    $default  reduce using rule 26 (block)


State 65

   29 statements: statements statement .

    $default  reduce using rule 29 (statements)


State 66

   45 expr: expr TOK_EQ . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 99
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 67

   46 expr: expr TOK_NE . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 100
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 68

   48 expr: expr TOK_LE . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 101
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 69

   50 expr: expr TOK_GE . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 102
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 70

   73 variable: expr TOK_ARROW . IDENT

    IDENT  shift, and go to state 103


State 71

   72 variable: expr '[' . expr ']'

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 104
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 72

   35 statement: expr ';' .

    $default  reduce using rule 35 (statement)


State 73

   44 expr: expr '=' . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 105
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 74

   51 expr: expr '+' . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 106
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 75

   52 expr: expr '-' . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 107
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 76

   53 expr: expr '*' . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 108
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 77

   54 expr: expr '/' . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 109
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 78

   55 expr: expr '%' . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 110
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 79

   47 expr: expr '<' . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 111
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 80

   49 expr: expr '>' . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 112
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 81

   67 call: params ')' .

    $default  reduce using rule 67 (call)


State 82

   70 params: params ',' . expr

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 113
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 83

   68 call: IDENT '(' ')' .

    $default  reduce using rule 68 (call)


State 84

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   69 params: IDENT '(' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    '='        shift, and go to state 73
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78
    '<'        shift, and go to state 79
    '>'        shift, and go to state 80

    $default  reduce using rule 69 (params)


State 85

   40 ifelse: TOK_IF '(' expr . ')' statement
   41       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    TOK_ARROW  shift, and go to state 70
    ')'        shift, and go to state 114
    '['        shift, and go to state 71
    '='        shift, and go to state 73
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78
    '<'        shift, and go to state 79
    '>'        shift, and go to state 80


State 86

   65 alloc: TOK_ALLOC '<' TOK_STRING . '>' '(' expr ')'

    '>'  shift, and go to state 115


State 87

   64 alloc: TOK_ALLOC '<' TOK_STRUCT . IDENT '>' '(' ')'

    IDENT  shift, and go to state 116


State 88

   66 alloc: TOK_ALLOC '<' TOK_ARRAY . '<' plaintype '>' '>' '(' expr ')'

    '<'  shift, and go to state 117


State 89

   39 while: TOK_WHILE '(' expr . ')' statement
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    TOK_ARROW  shift, and go to state 70
    ')'        shift, and go to state 118
    '['        shift, and go to state 71
    '='        shift, and go to state 73
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78
    '<'        shift, and go to state 79
    '>'        shift, and go to state 80


State 90

   43 return: TOK_RETURN expr ';' .

    $default  reduce using rule 43 (return)


State 91

    8 structdef: TOK_STRUCT IDENT '{' . structfields '}'
    9          | TOK_STRUCT IDENT '{' . '}'

    TOK_INT     shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_VOID    shift, and go to state 14
    TOK_ARRAY   shift, and go to state 119
    TOK_PTR     shift, and go to state 16
    '}'         shift, and go to state 120

    structfields  go to state 121
    type          go to state 122
    plaintype     go to state 123


State 92

   17 plaintype: TOK_PTR '<' TOK_STRUCT . IDENT '>'

    IDENT  shift, and go to state 124


State 93

   61 expr: '(' expr ')' .

    $default  reduce using rule 61 (expr)


State 94

   24 ident: plaintype TOK_ARRAY IDENT .

    $default  reduce using rule 24 (ident)


State 95

   18 function: ident '(' ')' . block
   20         | ident '(' ')' . ';'

    '{'  shift, and go to state 23
    ';'  shift, and go to state 125

    block       go to state 126
    statements  go to state 30


State 96

   19 function: ident '(' idents . ')' block
   21         | ident '(' idents . ')' ';'
   23 idents: idents . ',' ident

    ')'  shift, and go to state 127
    ','  shift, and go to state 128


State 97

   22 idents: ident .

    $default  reduce using rule 22 (idents)


State 98

   37 vardecl: ident '=' expr . ';'
   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    ';'        shift, and go to state 129
    '='        shift, and go to state 73
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78
    '<'        shift, and go to state 79
    '>'        shift, and go to state 80


State 99

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   45     | expr TOK_EQ expr .
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78

    $default  reduce using rule 45 (expr)


State 100

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   46     | expr TOK_NE expr .
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78

    $default  reduce using rule 46 (expr)


State 101

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   48     | expr TOK_LE expr .
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78

    $default  reduce using rule 48 (expr)


State 102

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   50     | expr TOK_GE expr .
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78

    $default  reduce using rule 50 (expr)


State 103

   73 variable: expr TOK_ARROW IDENT .

    $default  reduce using rule 73 (variable)


State 104

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   72         | expr '[' expr . ']'
   73         | expr . TOK_ARROW IDENT

    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    ']'        shift, and go to state 130
    '='        shift, and go to state 73
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78
    '<'        shift, and go to state 79
    '>'        shift, and go to state 80


State 105

   44 expr: expr . '=' expr
   44     | expr '=' expr .
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    '='        shift, and go to state 73
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78
    '<'        shift, and go to state 79
    '>'        shift, and go to state 80

    $default  reduce using rule 44 (expr)


State 106

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   51     | expr '+' expr .
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78

    $default  reduce using rule 51 (expr)


State 107

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   52     | expr '-' expr .
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78

    $default  reduce using rule 52 (expr)


State 108

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   53     | expr '*' expr .
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71

    $default  reduce using rule 53 (expr)


State 109

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   54     | expr '/' expr .
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71

    $default  reduce using rule 54 (expr)


State 110

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   55     | expr '%' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71

    $default  reduce using rule 55 (expr)


State 111

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   47     | expr '<' expr .
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78

    $default  reduce using rule 47 (expr)


State 112

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   49     | expr '>' expr .
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78

    $default  reduce using rule 49 (expr)


State 113

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   70 params: params ',' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    TOK_ARROW  shift, and go to state 70
    '['        shift, and go to state 71
    '='        shift, and go to state 73
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78
    '<'        shift, and go to state 79
    '>'        shift, and go to state 80

    $default  reduce using rule 70 (params)


State 114

   40 ifelse: TOK_IF '(' expr ')' . statement
   41       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    IDENT          shift, and go to state 5
    TOK_IF         shift, and go to state 6
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_INT        shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_VOID       shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_PTR        shift, and go to state 16
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    plaintype   go to state 26
    ident       go to state 57
    block       go to state 29
    statements  go to state 30
    statement   go to state 131
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    alloc       go to state 37
    call        go to state 38
    params      go to state 39
    variable    go to state 40
    constant    go to state 41


State 115

   65 alloc: TOK_ALLOC '<' TOK_STRING '>' . '(' expr ')'

    '('  shift, and go to state 132


State 116

   64 alloc: TOK_ALLOC '<' TOK_STRUCT IDENT . '>' '(' ')'

    '>'  shift, and go to state 133


State 117

   66 alloc: TOK_ALLOC '<' TOK_ARRAY '<' . plaintype '>' '>' '(' expr ')'

    TOK_INT     shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_VOID    shift, and go to state 14
    TOK_PTR     shift, and go to state 16

    plaintype  go to state 134


State 118

   39 while: TOK_WHILE '(' expr ')' . statement

    IDENT          shift, and go to state 5
    TOK_IF         shift, and go to state 6
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_INT        shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_VOID       shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_PTR        shift, and go to state 16
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    plaintype   go to state 26
    ident       go to state 57
    block       go to state 29
    statements  go to state 30
    statement   go to state 135
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    alloc       go to state 37
    call        go to state 38
    params      go to state 39
    variable    go to state 40
    constant    go to state 41


State 119

   13 type: TOK_ARRAY . '<' plaintype '>'

    '<'  shift, and go to state 136


State 120

    9 structdef: TOK_STRUCT IDENT '{' '}' .

    $default  reduce using rule 9 (structdef)


State 121

    8 structdef: TOK_STRUCT IDENT '{' structfields . '}'

    '}'  shift, and go to state 137


State 122

   10 structfields: type . ';'
   11             | type . ';' structfields

    ';'  shift, and go to state 138


State 123

   12 type: plaintype . IDENT

    IDENT  shift, and go to state 139


State 124

   17 plaintype: TOK_PTR '<' TOK_STRUCT IDENT . '>'

    '>'  shift, and go to state 140


State 125

   20 function: ident '(' ')' ';' .

    $default  reduce using rule 20 (function)


State 126

   18 function: ident '(' ')' block .

    $default  reduce using rule 18 (function)


State 127

   19 function: ident '(' idents ')' . block
   21         | ident '(' idents ')' . ';'

    '{'  shift, and go to state 23
    ';'  shift, and go to state 141

    block       go to state 142
    statements  go to state 30


State 128

   23 idents: idents ',' . ident

    TOK_INT     shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_VOID    shift, and go to state 14
    TOK_PTR     shift, and go to state 16

    plaintype  go to state 26
    ident      go to state 143


State 129

   37 vardecl: ident '=' expr ';' .

    $default  reduce using rule 37 (vardecl)


State 130

   72 variable: expr '[' expr ']' .

    $default  reduce using rule 72 (variable)


State 131

   40 ifelse: TOK_IF '(' expr ')' statement .
   41       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 144

    $default  reduce using rule 40 (ifelse)


State 132

   65 alloc: TOK_ALLOC '<' TOK_STRING '>' '(' . expr ')'

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 145
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 133

   64 alloc: TOK_ALLOC '<' TOK_STRUCT IDENT '>' . '(' ')'

    '('  shift, and go to state 146


State 134

   66 alloc: TOK_ALLOC '<' TOK_ARRAY '<' plaintype . '>' '>' '(' expr ')'

    '>'  shift, and go to state 147


State 135

   39 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 39 (while)


State 136

   13 type: TOK_ARRAY '<' . plaintype '>'

    TOK_INT     shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_VOID    shift, and go to state 14
    TOK_PTR     shift, and go to state 16

    plaintype  go to state 148


State 137

    8 structdef: TOK_STRUCT IDENT '{' structfields '}' .

    $default  reduce using rule 8 (structdef)


State 138

   10 structfields: type ';' .
   11             | type ';' . structfields

    TOK_INT     shift, and go to state 11
    TOK_STRING  shift, and go to state 12
    TOK_VOID    shift, and go to state 14
    TOK_ARRAY   shift, and go to state 119
    TOK_PTR     shift, and go to state 16

    $default  reduce using rule 10 (structfields)

    structfields  go to state 149
    type          go to state 122
    plaintype     go to state 123


State 139

   12 type: plaintype IDENT .

    $default  reduce using rule 12 (type)


State 140

   17 plaintype: TOK_PTR '<' TOK_STRUCT IDENT '>' .

    $default  reduce using rule 17 (plaintype)


State 141

   21 function: ident '(' idents ')' ';' .

    $default  reduce using rule 21 (function)


State 142

   19 function: ident '(' idents ')' block .

    $default  reduce using rule 19 (function)


State 143

   23 idents: idents ',' ident .

    $default  reduce using rule 23 (idents)


State 144

   41 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    IDENT          shift, and go to state 5
    TOK_IF         shift, and go to state 6
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_WHILE      shift, and go to state 9
    TOK_RETURN     shift, and go to state 10
    TOK_INT        shift, and go to state 11
    TOK_STRING     shift, and go to state 12
    TOK_VOID       shift, and go to state 14
    TOK_NOT        shift, and go to state 15
    TOK_PTR        shift, and go to state 16
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22
    '{'            shift, and go to state 23
    ';'            shift, and go to state 24

    plaintype   go to state 26
    ident       go to state 57
    block       go to state 29
    statements  go to state 30
    statement   go to state 150
    vardecl     go to state 32
    while       go to state 33
    ifelse      go to state 34
    return      go to state 35
    expr        go to state 36
    alloc       go to state 37
    call        go to state 38
    params      go to state 39
    variable    go to state 40
    constant    go to state 41


State 145

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   65 alloc: TOK_ALLOC '<' TOK_STRING '>' '(' expr . ')'
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    TOK_ARROW  shift, and go to state 70
    ')'        shift, and go to state 151
    '['        shift, and go to state 71
    '='        shift, and go to state 73
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78
    '<'        shift, and go to state 79
    '>'        shift, and go to state 80


State 146

   64 alloc: TOK_ALLOC '<' TOK_STRUCT IDENT '>' '(' . ')'

    ')'  shift, and go to state 152


State 147

   66 alloc: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' . '>' '(' expr ')'

    '>'  shift, and go to state 153


State 148

   13 type: TOK_ARRAY '<' plaintype . '>'

    '>'  shift, and go to state 154


State 149

   11 structfields: type ';' structfields .

    $default  reduce using rule 11 (structfields)


State 150

   41 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 41 (ifelse)


State 151

   65 alloc: TOK_ALLOC '<' TOK_STRING '>' '(' expr ')' .

    $default  reduce using rule 65 (alloc)


State 152

   64 alloc: TOK_ALLOC '<' TOK_STRUCT IDENT '>' '(' ')' .

    $default  reduce using rule 64 (alloc)


State 153

   66 alloc: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' . '(' expr ')'

    '('  shift, and go to state 155


State 154

   13 type: TOK_ARRAY '<' plaintype '>' .

    $default  reduce using rule 13 (type)


State 155

   66 alloc: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' . expr ')'

    IDENT          shift, and go to state 5
    TOK_ALLOC      shift, and go to state 7
    TOK_NULLPTR    shift, and go to state 8
    TOK_NOT        shift, and go to state 15
    TOK_POS        shift, and go to state 17
    TOK_NEG        shift, and go to state 18
    TOK_INTCON     shift, and go to state 19
    TOK_CHARCON    shift, and go to state 20
    TOK_STRINGCON  shift, and go to state 21
    '('            shift, and go to state 22

    expr      go to state 156
    alloc     go to state 37
    call      go to state 38
    params    go to state 39
    variable  go to state 40
    constant  go to state 41


State 156

   44 expr: expr . '=' expr
   45     | expr . TOK_EQ expr
   46     | expr . TOK_NE expr
   47     | expr . '<' expr
   48     | expr . TOK_LE expr
   49     | expr . '>' expr
   50     | expr . TOK_GE expr
   51     | expr . '+' expr
   52     | expr . '-' expr
   53     | expr . '*' expr
   54     | expr . '/' expr
   55     | expr . '%' expr
   66 alloc: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr . ')'
   72 variable: expr . '[' expr ']'
   73         | expr . TOK_ARROW IDENT

    TOK_EQ     shift, and go to state 66
    TOK_NE     shift, and go to state 67
    TOK_LE     shift, and go to state 68
    TOK_GE     shift, and go to state 69
    TOK_ARROW  shift, and go to state 70
    ')'        shift, and go to state 157
    '['        shift, and go to state 71
    '='        shift, and go to state 73
    '+'        shift, and go to state 74
    '-'        shift, and go to state 75
    '*'        shift, and go to state 76
    '/'        shift, and go to state 77
    '%'        shift, and go to state 78
    '<'        shift, and go to state 79
    '>'        shift, and go to state 80


State 157

   66 alloc: TOK_ALLOC '<' TOK_ARRAY '<' plaintype '>' '>' '(' expr ')' .

    $default  reduce using rule 66 (alloc)
