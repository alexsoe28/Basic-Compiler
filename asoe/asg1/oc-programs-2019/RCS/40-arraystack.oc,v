head	1.19;
access;
symbols;
locks;
comment	@# @;


1.19
date	2018.05.16.22.38.03;	author -;	state -;
branches;
next	1.18;

1.18
date	2018.05.16.22.37.14;	author -;	state -;
branches;
next	1.17;

1.17
date	2018.04.17.23.55.18;	author -;	state -;
branches;
next	1.16;

1.16
date	2018.04.06.20.18.43;	author -;	state -;
branches;
next	1.15;

1.15
date	2018.04.04.00.26.52;	author -;	state -;
branches;
next	1.14;

1.14
date	2018.04.03.22.51.25;	author -;	state -;
branches;
next	1.13;

1.13
date	2018.04.03.21.55.47;	author -;	state -;
branches;
next	1.12;

1.12
date	2018.04.03.21.55.20;	author -;	state -;
branches;
next	1.11;

1.11
date	2018.03.30.18.08.23;	author -;	state -;
branches;
next	1.10;

1.10
date	2018.03.30.17.21.02;	author -;	state -;
branches;
next	1.9;

1.9
date	2018.03.30.17.19.09;	author -;	state -;
branches;
next	1.8;

1.8
date	2018.03.30.00.46.39;	author -;	state -;
branches;
next	1.7;

1.7
date	2018.03.30.00.44.54;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.12.03.21.23.28;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.12.03.21.22.41;	author -;	state -;
branches;
next	1.4;

1.4
date	2011.10.29.01.24.19;	author -;	state -;
branches;
next	1.3;

1.3
date	2011.09.26.21.22.22;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.09.21.02.23.27;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.09.16.01.50.16;	author -;	state -;
branches;
next	;


desc
@@


1.19
log
@-
@
text
@// $Id: 40-arraystack.oc,v 1.18 2018-05-16 15:37:14-07 - - $

#include "oclib.h"

#define EMPTY (-1)

struct stack {
   string[] data;
   int size;
   int top;
}

stack new_stack (int size) {
   stack stack = new stack; // Zeros out both fields
   stack->data = new string[size]; // Array of null pointers
   stack->size = size;
   stack->top = EMPTY;
   return stack;
}

void push (stack stack, string str) {
   assert (stack->top < stack->size - 1);
   stack->top = stack->top + 1;
   stack->data[stack->top] = str;
}

string pop (stack stack) {
   string tmp = stack->data[stack->top];
   assert (stack->top != EMPTY);
   stack->top = stack->top - 1;
   return tmp;
}

bool empty (stack stack) {
   return stack->top == EMPTY;
}

int main (int argc, string[] argv) {
   stack stack = new_stack (100);
   int argi = 0;

   while (argi < argc) {
      push (stack, argv[argi]);
      argi = argi + 1;
   }

   while (not empty (stack)) {
      putstr (pop (stack));
      putchar ('\n');
   }
}

@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.17 2018-04-17 16:55:18-07 - - $
d28 1
a29 1
   string tmp = stack->data[stack->top];
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.16 2018-04-06 13:18:43-07 - - $
d40 1
a41 1
   int argi = 0;
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.15 2018-04-03 17:26:52-07 - - $
d3 1
a3 1
#include "oclib.oh"
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.14 2018-04-03 15:51:25-07 - - $
d48 2
a49 2
      puts (pop (stack));
      putc ('\n');
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.13 2018-04-03 14:55:47-07 - - $
d14 1
a14 1
   stack stack = new stack(); // Zeros out both fields
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.12 2018-04-03 14:55:20-07 - - $
d49 1
a49 1
      endl();
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.11 2018-03-30 11:08:23-07 - - $
d38 1
a38 1
void main (int argc, string[] argv) {
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.10 2018-03-30 10:21:02-07 - - $
d47 1
a47 1
   while (! empty (stack)) {
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.9 2018-03-30 10:19:09-07 - - $
d14 4
a17 4
   stack stack = new stack(); // Zeros out both fields.
   stack.data = new string[size]; // Array of null pointers.
   stack.size = size;
   stack.top = EMPTY;
d22 3
a24 3
   assert (stack.top < stack.size - 1);
   stack.top = stack.top + 1;
   stack.data[stack.top] = str;
d28 3
a30 3
   assert (stack.top != EMPTY);
   string tmp = stack.data[stack.top];
   stack.top = stack.top - 1;
d35 1
a35 1
   return stack.top == EMPTY;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.6 2012-12-03 13:23:28-08 - - $
d14 1
a14 1
   stack stack = new stack (); // Zeros out both fields.
a38 1
   string[] argv = getargv ();
@


1.8
log
@-
@
text
@d1 1
a1 1
//()$Id: 40-arraystack.oc,v 1.7 2018-03-29 17:44:54-07 - - $
d3 1
a3 1
#include()"oclib.oh"
d5 1
a5 1
#define()EMPTY (-1)
d7 4
a10 4
struct()stack {
()  string[] data;
()  int size;
()  int top;
d13 6
a18 6
stack()new_stack (int size) {
()  stack stack = new stack (); // Zeros out both fields.
()  stack->data = new string[size]; // Array of null pointers.
()  stack->size = size;
()  stack->top = EMPTY;
()  return stack;
d21 4
a24 4
void()push (stack stack, string str) {
()  assert (stack->top < stack->size - 1);
()  stack->top = stack->top + 1;
()  stack->data[stack->top] = str;
d27 5
a31 5
string()pop (stack stack) {
()  assert (stack->top != EMPTY);
()  string tmp = stack->data[stack->top];
()  stack->top = stack->top - 1;
()  return tmp;
d34 2
a35 2
bool()empty (stack stack) {
()  return stack->top == EMPTY;
d38 14
a51 13
void()main (int argc, string[] argv) {
()  stack stack = new_stack (100);

()  int argi = 0;
()  while (argv[argi] != null) {
()     push (stack, argv[argi]);
()     argi = argi + 1;
()  }

()  while (! empty (stack)) {
()     puts (pop (stack));
()     endl()();
()  }
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.6 2012-12-03 13:23:28-08 - - $
d3 1
a3 1
#include "oclib.oh"
d5 1
a5 1
#define EMPTY (-1)
d7 4
a10 4
struct stack {
   string[] data;
   int size;
   int top;
d13 6
a18 6
stack new_stack (int size) {
   stack stack = new stack (); // Zeros out both fields.
   stack->data = new string[size]; // Array of null pointers.
   stack->size = size;
   stack->top = EMPTY;
   return stack;
d21 4
a24 4
void push (stack stack, string str) {
   assert (stack->top < stack->size - 1);
   stack->top = stack->top + 1;
   stack->data[stack->top] = str;
d27 5
a31 5
string pop (stack stack) {
   assert (stack->top != EMPTY);
   string tmp = stack->data[stack->top];
   stack->top = stack->top - 1;
   return tmp;
d34 2
a35 2
bool empty (stack stack) {
   return stack->top == EMPTY;
d38 2
a39 2
void main (int argc, string[] argv) {
   stack stack = new_stack (100);
d41 10
a50 10
   int argi = 0;
   while (argv[argi] != null) {
      push (stack, argv[argi]);
      argi = argi + 1;
   }

   while (! empty (stack)) {
      puts (pop (stack));
      endl ();
   }
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.5 2012-12-03 13:22:41-08 - - $
d15 3
a17 3
   stack.data = new string[size]; // Array of null pointers.
   stack.size = size;
   stack.top = EMPTY;
d22 3
a24 3
   assert (stack.top < stack.size - 1);
   stack.top = stack.top + 1;
   stack.data[stack.top] = str;
d28 3
a30 3
   assert (stack.top != EMPTY);
   string tmp = stack.data[stack.top];
   stack.top = stack.top - 1;
d35 1
a35 1
   return stack.top == EMPTY;
d38 2
a39 9
// Main program.
string[] argv = getargv ();
stack stack = new_stack (100);

int argi = 0;
while (argv[argi] != null) {
   push (stack, argv[argi]);
   argi = argi + 1;
}
d41 10
a50 3
while (! empty (stack)) {
   puts (pop (stack));
   endl ();
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.4 2011-10-28 18:24:19-07 - - $
d40 1
a40 1
stack stack = new_stack ();
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.3 2011-09-26 14:22:22-07 - - $
d6 1
d29 2
a30 2
   string tmp = stack.data[top];
   top = top - 1;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.2 2011-09-20 19:23:27-07 - - $
d47 1
a47 1
while (! empty (stack) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.1 2011-09-15 18:50:16-07 - - $
d38 1
a38 1
string[] oc_argv = argv ();
d42 2
a43 2
while (argi < oc_argc) {
   push (stack, oc_argv[argi]);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: 40-arraystack.oc,v 1.2 2011-09-15 18:45:15-07 - - $
d8 1
d13 16
a28 15
   stack stack_ = new stack (); // Zeros out both fields.
   stack_.data = new string[size]; // Array of null pointers.
   stack_.top = EMPTY;
   return stack_;
}

void push (stack stack_, string str) {
   assert (stack_.top < stack_.size - 1);
   stack_.top = stack_.top + 1;
   stack_.data[stack_.top] = str;
}

string pop (stack stack_) {
   assert (stack_.top != EMPTY);
   string tmp = stack_.data[top];
d33 2
a34 2
bool empty (stack stack_) {
   return stack_.top == EMPTY;
d39 2
a40 1
stack stack_ = new_stack ();
d42 2
a43 3

while (argi < oc_argv.size) {
   push (stack_, oc_argv[argi]);
d47 2
a48 2
while (! empty (stack_) {
   puts (pop (stack_));
@
