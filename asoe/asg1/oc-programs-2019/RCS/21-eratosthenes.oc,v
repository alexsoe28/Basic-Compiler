head	1.11;
access;
symbols;
locks;
comment	@# @;


1.11
date	2018.05.18.21.47.41;	author -;	state -;
branches;
next	1.10;

1.10
date	2018.04.17.23.55.18;	author -;	state -;
branches;
next	1.9;

1.9
date	2018.04.06.20.17.54;	author -;	state -;
branches;
next	1.8;

1.8
date	2018.04.03.22.51.25;	author -;	state -;
branches;
next	1.7;

1.7
date	2018.04.03.21.55.47;	author -;	state -;
branches;
next	1.6;

1.6
date	2018.03.30.17.19.09;	author -;	state -;
branches;
next	1.5;

1.5
date	2018.03.30.00.46.39;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.11.30.22.42.43;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.06.02.23.00.42;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.09.19.21.25.40;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.09.16.01.50.16;	author -;	state -;
branches;
next	;


desc
@@


1.11
log
@-
@
text
@// $Id: 21-eratosthenes.oc,v 1.10 2018-04-17 16:55:18-07 - - $

#include "oclib.h"

#define SIZE 100
#define LOWPRIME 2

int main() {
   int prime = LOWPRIME;
   int index = LOWPRIME;
   string[] sieve = new string[SIZE];

   while (index < SIZE) {
      sieve[index] = true;
      index = index + 1;
   }

   while (prime < SIZE) {
      if (sieve[prime]) {
         index = prime * 2;
         while (index < SIZE) {
            sieve[index] = false;
            index = index + prime;
         }
      }
      prime = prime + 1;
   }

   index = LOWPRIME;
   while (index < SIZE) {
      if (sieve[index]) {
         putint (index);
         putchar ('\n');
      }
      index = index + 1;
   }

   return 0;
}

@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: 21-eratosthenes.oc,v 1.9 2018-04-06 13:17:54-07 - - $
d9 2
a11 1
   int index = LOWPRIME;
a17 1
   int prime = LOWPRIME;
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: 21-eratosthenes.oc,v 1.8 2018-04-03 15:51:25-07 - - $
d3 1
a3 1
#include "oclib.oh"
a6 1
string sieve[SIZE];
d9 1
d37 2
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: 21-eratosthenes.oc,v 1.7 2018-04-03 14:55:47-07 - - $
d7 1
a9 1
   bool[] sieve = new bool[SIZE];
d32 2
a33 2
         puti (index);
         putc ('\n');
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: 21-eratosthenes.oc,v 1.6 2018-03-30 10:19:09-07 - - $
d33 1
a33 1
         endl();
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: 21-eratosthenes.oc,v 1.4 2016-11-30 14:42:43-08 - - $
d8 1
a8 1
void main() {
@


1.5
log
@-
@
text
@d1 1
a1 1
//()$Id: 21-eratosthenes.oc,v 1.4 2016-11-30 14:42:43-08 - - $
d3 34
a36 31
#include()"oclib.oh"
#define()SIZE 100
#define()LOWPRIME 2

bool[]()sieve = new bool[SIZE];
int()index = LOWPRIME;

while()(index < SIZE) {
()  sieve[index] = true;
()  index = index + 1;
}

int()prime = LOWPRIME;
while()(prime < SIZE) {
()  if (sieve[prime]) {
()     index = prime * 2;
()     while (index < SIZE) {
()        sieve[index] = false;
()        index = index + prime;
()     }
()  }
()  prime = prime + 1;
}

index()= LOWPRIME;
while()(index < SIZE) {
()  if (sieve[index]) {
()     puti (index);
()     endl()();
()  }
()  index = index + 1;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: 21-eratosthenes.oc,v 1.3 2016-06-02 16:00:42-07 - - $
d3 3
a5 3
#include "oclib.oh"
#define SIZE 100
#define LOWPRIME 2
d7 2
a8 2
bool[] sieve = new bool[SIZE];
int index = LOWPRIME;
d10 3
a12 3
while (index < SIZE) {
   sieve[index] = true;
   index = index + 1;
d15 10
a24 10
int prime = LOWPRIME;
while (prime < SIZE) {
   if (sieve[prime]) {
      index = prime * 2;
      while (index < SIZE) {
         sieve[index] = false;
         index = index + prime;
      }
   }
   prime = prime + 1;
d27 7
a33 7
index = LOWPRIME;
while (index < SIZE) {
   if (sieve[index]) {
      puti (index);
      endl ();
   }
   index = index + 1;
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: 21-eratosthenes.oc,v 1.2 2011-09-19 14:25:40-07 - - $
a31 1
      index = index + 1;
d33 1
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: 21-eratosthenes.oc,v 1.1 2011-09-15 18:50:16-07 - - $
d32 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: 21-eratosthenes.oc,v 1.1 2011-09-15 18:45:15-07 - - $
d17 6
a22 4
   index = prime * 2;
   while (index < SIZE) {
      sieve[index] = false;
      index = index + prime;
d24 1
@
