head	1.17;
access;
symbols;
locks;
comment	@# @;


1.17
date	2018.05.16.22.43.13;	author -;	state -;
branches;
next	1.16;

1.16
date	2018.05.16.22.42.51;	author -;	state -;
branches;
next	1.15;

1.15
date	2018.05.16.22.42.12;	author -;	state -;
branches;
next	1.14;

1.14
date	2018.04.17.23.55.18;	author -;	state -;
branches;
next	1.13;

1.13
date	2018.04.06.20.20.02;	author -;	state -;
branches;
next	1.12;

1.12
date	2018.04.03.22.51.25;	author -;	state -;
branches;
next	1.11;

1.11
date	2018.04.03.21.55.47;	author -;	state -;
branches;
next	1.10;

1.10
date	2018.03.30.17.21.02;	author -;	state -;
branches;
next	1.9;

1.9
date	2018.03.30.17.19.09;	author -;	state -;
branches;
next	1.8;

1.8
date	2018.03.30.00.46.39;	author -;	state -;
branches;
next	1.7;

1.7
date	2018.03.30.00.44.54;	author -;	state -;
branches;
next	1.6;

1.6
date	2016.10.26.21.34.06;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.06.02.23.03.46;	author -;	state -;
branches;
next	1.4;

1.4
date	2012.12.03.21.26.42;	author -;	state -;
branches;
next	1.3;

1.3
date	2011.10.28.21.32.36;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.09.26.21.22.22;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.09.24.02.11.59;	author -;	state -;
branches;
next	;


desc
@@


1.17
log
@-
@
text
@// $Id: 53-insertionsort.oc,v 1.16 2018-05-16 15:42:51-07 - - $
//
// Use insertion sort to print argv in sorted order.
//

#include "oclib.h"

int strcmp (string s1, string s2) {
   int index = 0;
   bool contin = true;
   char s1c = 0;
   char s2c = 0;
   int cmp = 0;
   while (contin) {
      s1c = s1[index];
      s2c = s2[index];
      cmp = s1c - s2c;
      if (cmp != 0) return cmp;
      if (s1c == '\0') contin = false;
      index = index + 1;
   }
   return 0;
}

void insertion_sort (int size, string[] array) {
   int sorted = 1;
   int slot = 0;
   string element = null;
   bool contin = false;
   while (sorted < size) {
      slot = sorted;
      element = array[slot];
      contin = true;
      while (contin) {
         if (slot == 0) {
            contin = false;
         }else if (strcmp (array[slot - 1], element) <= 0) {
            contin = false;
         }else {
            array[slot] = array[slot - 1];
            slot = slot - 1;
         }
      }
      array[slot] = element;
      sorted = sorted + 1;
   }
}

void print_array (string label, int size, string[] array) {
   int index = 0;
   putchar ('\n');
   putstr (label);
   putstr (":\n");
   while (index < size) {
      putstr (array[index]);
      putchar ('\n');
      index = index + 1;
   }
}

int main (int argc, string[] argv) {
   print_array ("unsorted", argc, argv);
   insertion_sort (argc, argv);
   print_array ("sorted", argc, argv);
   return 0;
}

@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: 53-insertionsort.oc,v 1.15 2018-05-16 15:42:12-07 - - $
d50 1
a53 1
   int index = 0;
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: 53-insertionsort.oc,v 1.14 2018-04-17 16:55:18-07 - - $
d27 3
d31 3
a33 3
      int slot = sorted;
      string element = array[slot];
      bool contin = true;
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: 53-insertionsort.oc,v 1.13 2018-04-06 13:20:02-07 - - $
d11 3
d15 3
a17 3
      char s1c = s1[index];
      char s2c = s2[index];
      int cmp = s1c - s2c;
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: 53-insertionsort.oc,v 1.12 2018-04-03 15:51:25-07 - - $
d6 1
a6 1
#include "oclib.oh"
d59 1
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: 53-insertionsort.oc,v 1.11 2018-04-03 14:55:47-07 - - $
d44 3
a46 3
   putc ('\n');
   puts (label);
   puts (":\n");
d49 2
a50 2
      puts (array[index]);
      putc ('\n');
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: 53-insertionsort.oc,v 1.10 2018-03-30 10:21:02-07 - - $
d44 1
a44 1
   endl();
d50 1
a50 1
      endl();
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: 53-insertionsort.oc,v 1.9 2018-03-30 10:19:09-07 - - $
d55 1
a55 1
void main (int argc, string[] argv) {
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: 53-insertionsort.oc,v 1.6 2016-10-26 14:34:06-07 - - $
d44 1
a44 1
   endl ();
d50 1
a50 1
      endl ();
@


1.8
log
@-
@
text
@d1 1
a1 1
//()$Id: 53-insertionsort.oc,v 1.7 2018-03-29 17:44:54-07 - - $
d3 1
a3 1
//()Use insertion sort to print argv in sorted order.
d6 1
a6 1
#include()"oclib.oh"
d8 12
a19 12
int()strcmp (string s1, string s2) {
()  int index = 0;
()  bool contin = true;
()  while (contin) {
()     char s1c = s1[index];
()     char s2c = s2[index];
()     int cmp = s1c - s2c;
()     if (cmp != 0) return cmp;
()     if (s1c == '\0') contin = false;
()     index = index + 1;
()  }
()  return 0;
d22 19
a40 19
void()insertion_sort (int size, string[] array) {
()  int sorted = 1;
()  while (sorted < size) {
()     int slot = sorted;
()     string element = array[slot];
()     bool contin = true;
()     while (contin) {
()        if (slot == 0) {
()           contin = false;
()        }else if (strcmp (array[slot - 1], element) <= 0) {
()           contin = false;
()        }else {
()           array[slot] = array[slot - 1];
()           slot = slot - 1;
()        }
()     }
()     array[slot] = element;
()     sorted = sorted + 1;
()  }
d43 10
a52 10
void()print_array (string label, int size, string[] array) {
()  endl()();
()  puts (label);
()  puts (":\n");
()  int index = 0;
()  while (index < size) {
()     puts (array[index]);
()     endl()();
()     index = index + 1;
()  }
d55 4
a58 5
void()main (int argc, string[] argv) {
()  int argi = 0;
()  print_array ("unsorted", argc, argv);
()  insertion_sort (argc, argv);
()  print_array ("sorted", argc, argv);
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: 53-insertionsort.oc,v 1.6 2016-10-26 14:34:06-07 - - $
d3 1
a3 1
// Use insertion sort to print argv in sorted order.
d6 1
a6 1
#include "oclib.oh"
d8 12
a19 12
int strcmp (string s1, string s2) {
   int index = 0;
   bool contin = true;
   while (contin) {
      char s1c = s1[index];
      char s2c = s2[index];
      int cmp = s1c - s2c;
      if (cmp != 0) return cmp;
      if (s1c == '\0') contin = false;
      index = index + 1;
   }
   return 0;
d22 19
a40 19
void insertion_sort (int size, string[] array) {
   int sorted = 1;
   while (sorted < size) {
      int slot = sorted;
      string element = array[slot];
      bool contin = true;
      while (contin) {
         if (slot == 0) {
            contin = false;
         }else if (strcmp (array[slot - 1], element) <= 0) {
            contin = false;
         }else {
            array[slot] = array[slot - 1];
            slot = slot - 1;
         }
      }
      array[slot] = element;
      sorted = sorted + 1;
   }
d43 10
a52 10
void print_array (string label, int size, string[] array) {
   endl ();
   puts (label);
   puts (":\n");
   int index = 0;
   while (index < size) {
      puts (array[index]);
      endl ();
      index = index + 1;
   }
d55 5
a59 5
void main (int argc, string[] argv) {
   int argi = 0;
   print_array ("unsorted", argc, argv);
   insertion_sort (argc, argv);
   print_array ("sorted", argc, argv);
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: 53-insertionsort.oc,v 1.5 2016-06-02 16:03:46-07 - - $
d55 6
a60 6
string[] argv = getargv ();
int argc = 0;
while (argv[argc] != null) argc = argc + 1;
print_array ("unsorted", argc, argv);
insertion_sort (argc, argv);
print_array ("sorted", argc, argv);
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: 53-insertionsort.oc,v 1.4 2012-12-03 13:26:42-08 - - $
d14 1
a14 1
      int cmp = ord s1c - ord s2c;
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: 53-insertionsort.oc,v 1.3 2011-10-28 14:32:36-07 - - $
d3 1
a3 1
// Use insertion sort to print argv in osrted order.
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: 53-insertionsort.oc,v 1.2 2011-09-26 14:22:22-07 - - $
d58 1
a58 1
print_argv ("unsorted", argc, argv);
d60 1
a60 1
print_argv ("sorted", argc, argv);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: 53-insertionsort.oc,v 1.1 2011-09-23 19:11:59-07 - - $
d14 1
a14 1
      int cmp = ord (s1c) - ord (s2c);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: 33-insertionsort.oc,v 1.2 2011-09-20 19:23:27-07 - - $
d3 1
a3 1
// Use insertion sort to print oc_argv in osrted order.
d8 14
d43 1
a43 1
void print_argv (string label) {
d47 3
a49 3
   int argi = 0;
   while (argi < oc_argc) {
      puts (oc_argv[argi]);
a50 13
      argi = argi + 1;
   }
}

int strcmp (string s1, string s2) {
   int index = 0;
   bool contin = true;
   while (contin) {
      char s1c = s1[index];
      char s2c = s2[index];
      int cmp = ord (s1c) - ord (s2c);
      if (cmp != 0) return cmp;
      if (s1c == '\0') contin = false;
a52 1
   return 0;
d55 6
a60 3
print_argv ("unsorted");
insertion_sort (oc_argc, oc_argv);
print_argv ("sorted");
@
