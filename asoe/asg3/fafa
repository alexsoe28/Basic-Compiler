Starting parse
Entering state 0
Reducing stack by rule 7 (line 60):
-> $$ = nterm program (0x205e1b0->{ROOT 0.0.0 "<>":)
Stack now 0
Entering state 2
Reading a token: --(end of buffer or a NUL)
--accepting rule at line 31 ("# 1 "00-trivial.oc"")
--included # 1 "00-trivial.oc"
--accepting rule at line 33 ("
")
--accepting rule at line 31 ("# 1 "<built-in>"")
--included # 1 "<built-in>"
--accepting rule at line 33 ("
")
--accepting rule at line 31 ("# 1 "<command-line>"")
--included # 1 "<command-line>"
--accepting rule at line 33 ("
")
--accepting rule at line 31 ("# 1 "00-trivial.oc"")
--included # 1 "00-trivial.oc"
--accepting rule at line 33 ("
")
--accepting rule at line 33 ("
")
--accepting rule at line 33 ("
")
--accepting rule at line 42 ("int")
Next token is token TOK_INT (0x2062bb0->{TOK_INT 3.3.1 "int":)
Shifting token TOK_INT (0x2062bb0->{TOK_INT 3.3.1 "int":)
Entering state 11
Reducing stack by rule 15 (line 91):
   $1 = token TOK_INT (0x2062bb0->{TOK_INT 3.3.1 "int":)
-> $$ = nterm plaintype (0x2062bb0->{TOK_INT 3.3.1 "int":)
Stack now 0 2
Entering state 26
Reading a token: --accepting rule at line 32 (" ")
--accepting rule at line 53 ("main")
Next token is token IDENT (0x2062c30->{IDENT 3.3.5 "main":)
Shifting token IDENT (0x2062c30->{IDENT 3.3.5 "main":)
Entering state 59
Reducing stack by rule 25 (line 131):
   $1 = nterm plaintype (0x2062bb0->{TOK_INT 3.3.1 "int":)
   $2 = token IDENT (0x2062c30->{IDENT 3.3.5 "main":)
-> $$ = nterm ident (0x2062bb0->{TOK_INT 3.3.1 "int": 0x2062c30)
Stack now 0 2
Entering state 28
Reading a token: --accepting rule at line 65 ("(")
Next token is token '(' (0x2062c80->{'(' 3.3.9 "(":)
Shifting token '(' (0x2062c80->{'(' 3.3.9 "(":)
Entering state 61
Reading a token: --accepting rule at line 66 (")")
Next token is token ')' (0x2062d20->{')' 3.3.10 ")":)
Shifting token ')' (0x2062d20->{')' 3.3.10 ")":)
Entering state 95
Reading a token: --accepting rule at line 71 ("{")
Next token is token '{' (0x2062dc0->{'{' 3.3.11 "{":)
Shifting token '{' (0x2062dc0->{'{' 3.3.11 "{":)
Entering state 23
Reading a token: --accepting rule at line 33 ("
")
--accepting rule at line 32 (" ")
--accepting rule at line 35 ("if")
Next token is token TOK_IF (0x2062f20->{TOK_IF 3.4.2 "if":)
Shifting token TOK_IF (0x2062f20->{TOK_IF 3.4.2 "if":)
Entering state 6
Reading a token: --accepting rule at line 65 ("(")
Next token is token '(' (0x2062fc0->{'(' 3.4.4 "(":)
Shifting token '(' (0x2062fc0->{'(' 3.4.4 "(":)
Entering state 45
Reading a token: --accepting rule at line 53 ("yy")
Next token is token IDENT (0x2063040->{IDENT 3.4.5 "yy":)
Shifting token IDENT (0x2063040->{IDENT 3.4.5 "yy":)
Entering state 5
Reading a token: --accepting rule at line 32 (" ")
--accepting rule at line 56 ("==")
Next token is token TOK_EQ (0x20630b0->{TOK_EQ 3.4.8 "==":)
Reducing stack by rule 71 (line 250):
   $1 = token IDENT (0x2063040->{IDENT 3.4.5 "yy":)
-> $$ = nterm variable (0x2063040->{IDENT 3.4.5 "yy":)
Stack now 0 2 28 61 95 23 6 45
Entering state 40
Reducing stack by rule 62 (line 212):
   $1 = nterm variable (0x2063040->{IDENT 3.4.5 "yy":)
-> $$ = nterm expr (0x2063040->{IDENT 3.4.5 "yy":)
Stack now 0 2 28 61 95 23 6 45
Entering state 85
Next token is token TOK_EQ (0x20630b0->{TOK_EQ 3.4.8 "==":)
Shifting token TOK_EQ (0x20630b0->{TOK_EQ 3.4.8 "==":)
Entering state 66
Reading a token: --accepting rule at line 32 (" ")
--accepting rule at line 52 ("5")
Next token is token TOK_INTCON (0x2063130->{TOK_INTCON 3.4.11 "5":)
Shifting token TOK_INTCON (0x2063130->{TOK_INTCON 3.4.11 "5":)
Entering state 19
Reducing stack by rule 76 (line 262):
   $1 = token TOK_INTCON (0x2063130->{TOK_INTCON 3.4.11 "5":)
-> $$ = nterm constant (0x2063130->{TOK_INTCON 3.4.11 "5":)
Stack now 0 2 28 61 95 23 6 45 85 66
Entering state 41
Reducing stack by rule 63 (line 213):
   $1 = nterm constant (0x2063130->{TOK_INTCON 3.4.11 "5":)
-> $$ = nterm expr (0x2063130->{TOK_INTCON 3.4.11 "5":)
Stack now 0 2 28 61 95 23 6 45 85 66
Entering state 99
Reading a token: --accepting rule at line 66 (")")
Next token is token ')' (0x20631a0->{')' 3.4.12 ")":)
Reducing stack by rule 45 (line 194):
   $1 = nterm expr (0x2063040->{IDENT 3.4.5 "yy":)
   $2 = token TOK_EQ (0x20630b0->{TOK_EQ 3.4.8 "==":)
   $3 = nterm expr (0x2063130->{TOK_INTCON 3.4.11 "5":)
-> $$ = nterm expr (0x20630b0->{TOK_EQ 3.4.8 "==": 0x2063040 0x2063130)
Stack now 0 2 28 61 95 23 6 45
Entering state 85
Next token is token ')' (0x20631a0->{')' 3.4.12 ")":)
Shifting token ')' (0x20631a0->{')' 3.4.12 ")":)
Entering state 114
Reading a token: --accepting rule at line 70 (";")
Next token is token ';' (0x2063260->{';' 3.4.13 ";":)
Shifting token ';' (0x2063260->{';' 3.4.13 ";":)
Entering state 24
Reducing stack by rule 36 (line 158):
   $1 = token ';' (0x2063260->{';' 3.4.13 ";":)
-> $$ = nterm statement (0x2063260->{';' 3.4.13 ";":)
Stack now 0 2 28 61 95 23 6 45 85 114
Entering state 131
Reading a token: --accepting rule at line 33 ("
")
--accepting rule at line 72 ("}")
Next token is token '}' (0x20632b0->{'}' 3.5.1 "}":)
Reducing stack by rule 40 (line 175):
   $1 = token TOK_IF (0x2062f20->{TOK_IF 3.4.2 "if":)
   $2 = token '(' (0x2062fc0->{'(' 3.4.4 "(":)
   $3 = nterm expr (0x20630b0->{TOK_EQ 3.4.8 "==": 0x2063040 0x2063130)
   $4 = token ')' (0x20631a0->{')' 3.4.12 ")":)
   $5 = nterm statement (0x2063260->{';' 3.4.13 ";":)
Deleting astree (0x2062fc0->{'(' 3.4.4 "(":)
Deleting astree (0x20631a0->{')' 3.4.12 ")":)
-> $$ = nterm ifelse (0x2062f20->{TOK_IF 3.4.2 "if": 0x20630b0 0x2063260)
Stack now 0 2 28 61 95 23
Entering state 34
Reducing stack by rule 33 (line 155):
   $1 = nterm ifelse (0x2062f20->{TOK_IF 3.4.2 "if": 0x20630b0 0x2063260)
-> $$ = nterm statement (0x2062f20->{TOK_IF 3.4.2 "if": 0x20630b0 0x2063260)
Stack now 0 2 28 61 95 23
Entering state 58
Reducing stack by rule 28 (line 146):
   $1 = token '{' (0x2062dc0->{'{' 3.3.11 "{":)
   $2 = nterm statement (0x2062f20->{TOK_IF 3.4.2 "if": 0x20630b0 0x2063260)
-> $$ = nterm statements (0x2062dc0->{'{' 3.3.11 "{": 0x2062f20)
Stack now 0 2 28 61 95
Entering state 30
Next token is token '}' (0x20632b0->{'}' 3.5.1 "}":)
Shifting token '}' (0x20632b0->{'}' 3.5.1 "}":)
Entering state 64
Reducing stack by rule 26 (line 136):
   $1 = nterm statements (0x2062dc0->{'{' 3.3.11 "{": 0x2062f20)
   $2 = token '}' (0x20632b0->{'}' 3.5.1 "}":)
Deleting astree (0x20632b0->{'}' 3.5.1 "}":)
-> $$ = nterm block (0x2062dc0->{TOK_BLOCK 3.3.11 "{": 0x2062f20)
Stack now 0 2 28 61 95
Entering state 126
Reducing stack by rule 18 (line 98):
   $1 = nterm ident (0x2062bb0->{TOK_INT 3.3.1 "int": 0x2062c30)
   $2 = token '(' (0x2062c80->{'(' 3.3.9 "(":)
   $3 = token ')' (0x2062d20->{')' 3.3.10 ")":)
   $4 = nterm block (0x2062dc0->{TOK_BLOCK 3.3.11 "{": 0x2062f20)
Deleting astree (0x2062d20->{')' 3.3.10 ")":)
-> $$ = nterm function (0x2062d20->{TOK_FUNCTION 3.3.1 "": 0x2062bb0 0x2062c80 0x2062dc0)
Stack now 0 2
Entering state 27
Reducing stack by rule 3 (line 56):
   $1 = nterm program (0x205e1b0->{ROOT 0.0.0 "<>":)
   $2 = nterm function (0x2062d20->{TOK_FUNCTION 3.3.1 "": 0x2062bb0 0x2062c80 0x2062dc0)
-> $$ = nterm program (0x205e1b0->{ROOT 0.0.0 "<>": 0x2062d20)
Stack now 0
Entering state 2
Reading a token: --accepting rule at line 33 ("
")
--(end of buffer or a NUL)
--EOF (start condition 0)
Now at end of input.
Reducing stack by rule 1 (line 52):
   $1 = nterm program (0x205e1b0->{ROOT 0.0.0 "<>": 0x2062d20)
-> $$ = nterm start (nullptr)
Stack now 0
Entering state 1
Now at end of input.
Shifting token $end ()
Entering state 3
Stack now 0 1 3
Cleanup: popping token $end ()
Cleanup: popping nterm start (nullptr)
