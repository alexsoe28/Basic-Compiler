Terminals unused in grammar

   ROOT
   NUMBER
   UNOP
   BINOP
   TOK_NEWSTRING
   TOK_INDEX
   TOK_IFELSE
   TOK_ALLOC
   TOK_NULLPTR
   TOK_RETURNVOID
   TOK_VARDECL
   TOK_NOT
   TOK_PTR
   TOK_BLOCK
   TOK_CALL
   DECLID
   TOK_FUNCTION
   TOK_PROTOTYPE
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ORD
   TOK_CHR
   TOK_ROOT
   TOK_PARAMLIST
   BAD_TOK
   TOK_EXC
   TOK_ARROW
   '%'
   TOK_NEQ
   TOK_LEQ
   TOK_GEQ
   POS
   NEG
   '^'


State 13 conflicts: 1 shift/reduce
State 78 conflicts: 13 shift/reduce
State 99 conflicts: 13 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | %empty

    8 structdef: TOK_STRUCT IDENT '{' '}'
    9          | TOK_STRUCT IDENT '{' structfields '}'

   10 structfields: structfield ';' structfields
   11             | structfield ';'

   12 structfield: plaintype IDENT
   13            | plaintype TOK_ARRAY IDENT

   14 plaintype: TOK_VOID
   15          | TOK_INT
   16          | TOK_STRING
   17          | IDENT

   18 function: ident '(' idents ')' block
   19         | ident '(' idents ')' ';'
   20         | ident '(' ')' ';'
   21         | ident '(' ')' block

   22 idents: idents ',' ident
   23       | ident

   24 ident: plaintype TOK_ARRAY IDENT
   25      | plaintype IDENT

   26 block: statements '}'
   27      | '{' '}'

   28 statements: statements statement
   29           | '{' statement

   30 statement: block
   31          | vardecl
   32          | while
   33          | ifelse
   34          | return
   35          | expr ';'

   36 vardecl: ident '=' expr ';'

   37 while: TOK_WHILE '(' expr ')' statement

   38 ifelse: TOK_IF '(' expr ')' statement
   39       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   40 return: TOK_RETURN ';'
   41       | TOK_RETURN expr ';'

   42 expr: expr binop expr
   43     | unop expr
   44     | alloc
   45     | call
   46     | '(' expr ')'
   47     | variable
   48     | constant

   49 binop: TOK_EQ
   50      | TOK_NE
   51      | '>'
   52      | TOK_LE
   53      | '<'
   54      | TOK_GE
   55      | '+'
   56      | '-'
   57      | '*'
   58      | '/'
   59      | '='

   60 unop: TOK_POS
   61     | TOK_NEG
   62     | '!'
   63     | TOK_NEW

   64 alloc: TOK_NEW IDENT '(' ')'
   65      | TOK_NEW TOK_STRING '(' expr ')'
   66      | TOK_NEW plaintype '[' expr ']'

   67 call: params ')'
   68     | IDENT '(' ')'

   69 params: IDENT '(' expr
   70       | params ',' expr

   71 variable: IDENT
   72         | expr '[' expr ']'
   73         | expr '.' IDENT

   74 constant: TOK_STRINGCON
   75         | TOK_CHARCON
   76         | TOK_INTCON
   77         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 62
'%' (37)
'(' (40) 18 19 20 21 37 38 39 46 64 65 68 69
')' (41) 18 19 20 21 37 38 39 46 64 65 67 68
'*' (42) 57
'+' (43) 55
',' (44) 22 70
'-' (45) 56
'.' (46) 73
'/' (47) 58
';' (59) 6 10 11 19 20 35 36 40 41
'<' (60) 53
'=' (61) 36 59
'>' (62) 51
'[' (91) 66 72
']' (93) 66 72
'^' (94)
'{' (123) 8 9 27 29
'}' (125) 5 8 9 26 27
error (256) 5 6
ROOT (258)
IDENT (259) 8 9 12 13 17 24 25 64 68 69 71 73
NUMBER (260)
UNOP (261)
BINOP (262)
TOK_NEWSTRING (263)
TOK_INDEX (264)
TOK_IF (265) 38 39
TOK_ELSE (266) 39
TOK_IFELSE (267)
TOK_ALLOC (268)
TOK_NULLPTR (269)
TOK_WHILE (270) 37
TOK_RETURN (271) 40 41
TOK_RETURNVOID (272)
TOK_INT (273) 15
TOK_STRING (274) 16 65
TOK_STRUCT (275) 8 9
TOK_VOID (276) 14
TOK_NEW (277) 63 64 65 66
TOK_NULL (278) 77
TOK_ARRAY (279) 13 24
TOK_VARDECL (280)
TOK_EQ (281) 49
TOK_NE (282) 50
TOK_LE (283) 52
TOK_GE (284) 54
TOK_NOT (285)
TOK_PTR (286)
TOK_BLOCK (287)
TOK_CALL (288)
DECLID (289)
TOK_FUNCTION (290)
TOK_PROTOTYPE (291)
TOK_POS (292) 60
TOK_NEG (293) 61
TOK_NEWARRAY (294)
TOK_TYPEID (295)
TOK_FIELD (296)
TOK_ORD (297)
TOK_CHR (298)
TOK_ROOT (299)
TOK_PARAMLIST (300)
BAD_TOK (301)
TOK_EXC (302)
TOK_INTCON (303) 76
TOK_CHARCON (304) 75
TOK_STRINGCON (305) 74
TOK_ARROW (306)
TOK_NEQ (307)
TOK_LEQ (308)
TOK_GEQ (309)
POS (310)
NEG (311)


Nonterminals, with rules where they appear

$accept (76)
    on left: 0
start (77)
    on left: 1, on right: 0
program (78)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (79)
    on left: 8 9, on right: 2
structfields (80)
    on left: 10 11, on right: 9 10
structfield (81)
    on left: 12 13, on right: 10 11
plaintype (82)
    on left: 14 15 16 17, on right: 12 13 24 25 66
function (83)
    on left: 18 19 20 21, on right: 3
idents (84)
    on left: 22 23, on right: 18 19 22
ident (85)
    on left: 24 25, on right: 18 19 20 21 22 23 36
block (86)
    on left: 26 27, on right: 18 21 30
statements (87)
    on left: 28 29, on right: 26 28
statement (88)
    on left: 30 31 32 33 34 35, on right: 4 28 29 37 38 39
vardecl (89)
    on left: 36, on right: 31
while (90)
    on left: 37, on right: 32
ifelse (91)
    on left: 38 39, on right: 33
return (92)
    on left: 40 41, on right: 34
expr (93)
    on left: 42 43 44 45 46 47 48, on right: 35 36 37 38 39 41 42 43
    46 65 66 69 70 72 73
binop (94)
    on left: 49 50 51 52 53 54 55 56 57 58 59, on right: 42
unop (95)
    on left: 60 61 62 63, on right: 43
alloc (96)
    on left: 64 65 66, on right: 44
call (97)
    on left: 67 68, on right: 45
params (98)
    on left: 69 70, on right: 67 70
variable (99)
    on left: 71 72 73, on right: 47
constant (100)
    on left: 74 75 76 77, on right: 48


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    IDENT          shift, and go to state 5
    TOK_IF         shift, and go to state 6
    TOK_WHILE      shift, and go to state 7
    TOK_RETURN     shift, and go to state 8
    TOK_INT        shift, and go to state 9
    TOK_STRING     shift, and go to state 10
    TOK_STRUCT     shift, and go to state 11
    TOK_VOID       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '{'            shift, and go to state 21
    '!'            shift, and go to state 22

    $end  reduce using rule 1 (start)

    structdef   go to state 23
    plaintype   go to state 24
    function    go to state 25
    ident       go to state 26
    block       go to state 27
    statements  go to state 28
    statement   go to state 29
    vardecl     go to state 30
    while       go to state 31
    ifelse      go to state 32
    return      go to state 33
    expr        go to state 34
    unop        go to state 35
    alloc       go to state 36
    call        go to state 37
    params      go to state 38
    variable    go to state 39
    constant    go to state 40


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 41
    ';'  shift, and go to state 42


State 5

   17 plaintype: IDENT .
   68 call: IDENT . '(' ')'
   69 params: IDENT . '(' expr
   71 variable: IDENT .

    '('  shift, and go to state 43

    IDENT      reduce using rule 17 (plaintype)
    TOK_ARRAY  reduce using rule 17 (plaintype)
    $default   reduce using rule 71 (variable)


State 6

   38 ifelse: TOK_IF . '(' expr ')' statement
   39       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 44


State 7

   37 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 45


State 8

   40 return: TOK_RETURN . ';'
   41       | TOK_RETURN . expr ';'

    IDENT          shift, and go to state 46
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    ';'            shift, and go to state 47
    '!'            shift, and go to state 22

    expr      go to state 48
    unop      go to state 35
    alloc     go to state 36
    call      go to state 37
    params    go to state 38
    variable  go to state 39
    constant  go to state 40


State 9

   15 plaintype: TOK_INT .

    $default  reduce using rule 15 (plaintype)


State 10

   16 plaintype: TOK_STRING .

    $default  reduce using rule 16 (plaintype)


State 11

    8 structdef: TOK_STRUCT . IDENT '{' '}'
    9          | TOK_STRUCT . IDENT '{' structfields '}'

    IDENT  shift, and go to state 49


State 12

   14 plaintype: TOK_VOID .

    $default  reduce using rule 14 (plaintype)


State 13

   63 unop: TOK_NEW .
   64 alloc: TOK_NEW . IDENT '(' ')'
   65      | TOK_NEW . TOK_STRING '(' expr ')'
   66      | TOK_NEW . plaintype '[' expr ']'

    IDENT       shift, and go to state 50
    TOK_INT     shift, and go to state 9
    TOK_STRING  shift, and go to state 51
    TOK_VOID    shift, and go to state 12

    IDENT     [reduce using rule 63 (unop)]
    $default  reduce using rule 63 (unop)

    plaintype  go to state 52


State 14

   77 constant: TOK_NULL .

    $default  reduce using rule 77 (constant)


State 15

   60 unop: TOK_POS .

    $default  reduce using rule 60 (unop)


State 16

   61 unop: TOK_NEG .

    $default  reduce using rule 61 (unop)


State 17

   76 constant: TOK_INTCON .

    $default  reduce using rule 76 (constant)


State 18

   75 constant: TOK_CHARCON .

    $default  reduce using rule 75 (constant)


State 19

   74 constant: TOK_STRINGCON .

    $default  reduce using rule 74 (constant)


State 20

   46 expr: '(' . expr ')'

    IDENT          shift, and go to state 46
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '!'            shift, and go to state 22

    expr      go to state 53
    unop      go to state 35
    alloc     go to state 36
    call      go to state 37
    params    go to state 38
    variable  go to state 39
    constant  go to state 40


State 21

   27 block: '{' . '}'
   29 statements: '{' . statement

    IDENT          shift, and go to state 5
    TOK_IF         shift, and go to state 6
    TOK_WHILE      shift, and go to state 7
    TOK_RETURN     shift, and go to state 8
    TOK_INT        shift, and go to state 9
    TOK_STRING     shift, and go to state 10
    TOK_VOID       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '{'            shift, and go to state 21
    '}'            shift, and go to state 54
    '!'            shift, and go to state 22

    plaintype   go to state 24
    ident       go to state 55
    block       go to state 27
    statements  go to state 28
    statement   go to state 56
    vardecl     go to state 30
    while       go to state 31
    ifelse      go to state 32
    return      go to state 33
    expr        go to state 34
    unop        go to state 35
    alloc       go to state 36
    call        go to state 37
    params      go to state 38
    variable    go to state 39
    constant    go to state 40


State 22

   62 unop: '!' .

    $default  reduce using rule 62 (unop)


State 23

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 24

   24 ident: plaintype . TOK_ARRAY IDENT
   25      | plaintype . IDENT

    IDENT      shift, and go to state 57
    TOK_ARRAY  shift, and go to state 58


State 25

    3 program: program function .

    $default  reduce using rule 3 (program)


State 26

   18 function: ident . '(' idents ')' block
   19         | ident . '(' idents ')' ';'
   20         | ident . '(' ')' ';'
   21         | ident . '(' ')' block
   36 vardecl: ident . '=' expr ';'

    '('  shift, and go to state 59
    '='  shift, and go to state 60


State 27

   30 statement: block .

    $default  reduce using rule 30 (statement)


State 28

   26 block: statements . '}'
   28 statements: statements . statement

    IDENT          shift, and go to state 5
    TOK_IF         shift, and go to state 6
    TOK_WHILE      shift, and go to state 7
    TOK_RETURN     shift, and go to state 8
    TOK_INT        shift, and go to state 9
    TOK_STRING     shift, and go to state 10
    TOK_VOID       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '{'            shift, and go to state 21
    '}'            shift, and go to state 61
    '!'            shift, and go to state 22

    plaintype   go to state 24
    ident       go to state 55
    block       go to state 27
    statements  go to state 28
    statement   go to state 62
    vardecl     go to state 30
    while       go to state 31
    ifelse      go to state 32
    return      go to state 33
    expr        go to state 34
    unop        go to state 35
    alloc       go to state 36
    call        go to state 37
    params      go to state 38
    variable    go to state 39
    constant    go to state 40


State 29

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 30

   31 statement: vardecl .

    $default  reduce using rule 31 (statement)


State 31

   32 statement: while .

    $default  reduce using rule 32 (statement)


State 32

   33 statement: ifelse .

    $default  reduce using rule 33 (statement)


State 33

   34 statement: return .

    $default  reduce using rule 34 (statement)


State 34

   35 statement: expr . ';'
   42 expr: expr . binop expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' IDENT

    TOK_EQ  shift, and go to state 63
    TOK_NE  shift, and go to state 64
    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '['     shift, and go to state 67
    ';'     shift, and go to state 68
    '.'     shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '<'     shift, and go to state 75
    '>'     shift, and go to state 76

    binop  go to state 77


State 35

   43 expr: unop . expr

    IDENT          shift, and go to state 46
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '!'            shift, and go to state 22

    expr      go to state 78
    unop      go to state 35
    alloc     go to state 36
    call      go to state 37
    params    go to state 38
    variable  go to state 39
    constant  go to state 40


State 36

   44 expr: alloc .

    $default  reduce using rule 44 (expr)


State 37

   45 expr: call .

    $default  reduce using rule 45 (expr)


State 38

   67 call: params . ')'
   70 params: params . ',' expr

    ')'  shift, and go to state 79
    ','  shift, and go to state 80


State 39

   47 expr: variable .

    $default  reduce using rule 47 (expr)


State 40

   48 expr: constant .

    $default  reduce using rule 48 (expr)


State 41

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 42

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 43

   68 call: IDENT '(' . ')'
   69 params: IDENT '(' . expr

    IDENT          shift, and go to state 46
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    ')'            shift, and go to state 81
    '!'            shift, and go to state 22

    expr      go to state 82
    unop      go to state 35
    alloc     go to state 36
    call      go to state 37
    params    go to state 38
    variable  go to state 39
    constant  go to state 40


State 44

   38 ifelse: TOK_IF '(' . expr ')' statement
   39       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    IDENT          shift, and go to state 46
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '!'            shift, and go to state 22

    expr      go to state 83
    unop      go to state 35
    alloc     go to state 36
    call      go to state 37
    params    go to state 38
    variable  go to state 39
    constant  go to state 40


State 45

   37 while: TOK_WHILE '(' . expr ')' statement

    IDENT          shift, and go to state 46
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '!'            shift, and go to state 22

    expr      go to state 84
    unop      go to state 35
    alloc     go to state 36
    call      go to state 37
    params    go to state 38
    variable  go to state 39
    constant  go to state 40


State 46

   68 call: IDENT . '(' ')'
   69 params: IDENT . '(' expr
   71 variable: IDENT .

    '('  shift, and go to state 43

    $default  reduce using rule 71 (variable)


State 47

   40 return: TOK_RETURN ';' .

    $default  reduce using rule 40 (return)


State 48

   41 return: TOK_RETURN expr . ';'
   42 expr: expr . binop expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' IDENT

    TOK_EQ  shift, and go to state 63
    TOK_NE  shift, and go to state 64
    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '['     shift, and go to state 67
    ';'     shift, and go to state 85
    '.'     shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '<'     shift, and go to state 75
    '>'     shift, and go to state 76

    binop  go to state 77


State 49

    8 structdef: TOK_STRUCT IDENT . '{' '}'
    9          | TOK_STRUCT IDENT . '{' structfields '}'

    '{'  shift, and go to state 86


State 50

   17 plaintype: IDENT .
   64 alloc: TOK_NEW IDENT . '(' ')'

    '('  shift, and go to state 87

    $default  reduce using rule 17 (plaintype)


State 51

   16 plaintype: TOK_STRING .
   65 alloc: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 88

    $default  reduce using rule 16 (plaintype)


State 52

   66 alloc: TOK_NEW plaintype . '[' expr ']'

    '['  shift, and go to state 89


State 53

   42 expr: expr . binop expr
   46     | '(' expr . ')'
   72 variable: expr . '[' expr ']'
   73         | expr . '.' IDENT

    TOK_EQ  shift, and go to state 63
    TOK_NE  shift, and go to state 64
    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    ')'     shift, and go to state 90
    '['     shift, and go to state 67
    '.'     shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '<'     shift, and go to state 75
    '>'     shift, and go to state 76

    binop  go to state 77


State 54

   27 block: '{' '}' .

    $default  reduce using rule 27 (block)


State 55

   36 vardecl: ident . '=' expr ';'

    '='  shift, and go to state 60


State 56

   29 statements: '{' statement .

    $default  reduce using rule 29 (statements)


State 57

   25 ident: plaintype IDENT .

    $default  reduce using rule 25 (ident)


State 58

   24 ident: plaintype TOK_ARRAY . IDENT

    IDENT  shift, and go to state 91


State 59

   18 function: ident '(' . idents ')' block
   19         | ident '(' . idents ')' ';'
   20         | ident '(' . ')' ';'
   21         | ident '(' . ')' block

    IDENT       shift, and go to state 92
    TOK_INT     shift, and go to state 9
    TOK_STRING  shift, and go to state 10
    TOK_VOID    shift, and go to state 12
    ')'         shift, and go to state 93

    plaintype  go to state 24
    idents     go to state 94
    ident      go to state 95


State 60

   36 vardecl: ident '=' . expr ';'

    IDENT          shift, and go to state 46
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '!'            shift, and go to state 22

    expr      go to state 96
    unop      go to state 35
    alloc     go to state 36
    call      go to state 37
    params    go to state 38
    variable  go to state 39
    constant  go to state 40


State 61

   26 block: statements '}' .

    $default  reduce using rule 26 (block)


State 62

   28 statements: statements statement .

    $default  reduce using rule 28 (statements)


State 63

   49 binop: TOK_EQ .

    $default  reduce using rule 49 (binop)


State 64

   50 binop: TOK_NE .

    $default  reduce using rule 50 (binop)


State 65

   52 binop: TOK_LE .

    $default  reduce using rule 52 (binop)


State 66

   54 binop: TOK_GE .

    $default  reduce using rule 54 (binop)


State 67

   72 variable: expr '[' . expr ']'

    IDENT          shift, and go to state 46
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '!'            shift, and go to state 22

    expr      go to state 97
    unop      go to state 35
    alloc     go to state 36
    call      go to state 37
    params    go to state 38
    variable  go to state 39
    constant  go to state 40


State 68

   35 statement: expr ';' .

    $default  reduce using rule 35 (statement)


State 69

   73 variable: expr '.' . IDENT

    IDENT  shift, and go to state 98


State 70

   59 binop: '=' .

    $default  reduce using rule 59 (binop)


State 71

   55 binop: '+' .

    $default  reduce using rule 55 (binop)


State 72

   56 binop: '-' .

    $default  reduce using rule 56 (binop)


State 73

   57 binop: '*' .

    $default  reduce using rule 57 (binop)


State 74

   58 binop: '/' .

    $default  reduce using rule 58 (binop)


State 75

   53 binop: '<' .

    $default  reduce using rule 53 (binop)


State 76

   51 binop: '>' .

    $default  reduce using rule 51 (binop)


State 77

   42 expr: expr binop . expr

    IDENT          shift, and go to state 46
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '!'            shift, and go to state 22

    expr      go to state 99
    unop      go to state 35
    alloc     go to state 36
    call      go to state 37
    params    go to state 38
    variable  go to state 39
    constant  go to state 40


State 78

   42 expr: expr . binop expr
   43     | unop expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' IDENT

    TOK_EQ  shift, and go to state 63
    TOK_NE  shift, and go to state 64
    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '['     shift, and go to state 67
    '.'     shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '<'     shift, and go to state 75
    '>'     shift, and go to state 76

    TOK_EQ    [reduce using rule 43 (expr)]
    TOK_NE    [reduce using rule 43 (expr)]
    TOK_LE    [reduce using rule 43 (expr)]
    TOK_GE    [reduce using rule 43 (expr)]
    '['       [reduce using rule 43 (expr)]
    '.'       [reduce using rule 43 (expr)]
    '='       [reduce using rule 43 (expr)]
    '+'       [reduce using rule 43 (expr)]
    '-'       [reduce using rule 43 (expr)]
    '*'       [reduce using rule 43 (expr)]
    '/'       [reduce using rule 43 (expr)]
    '<'       [reduce using rule 43 (expr)]
    '>'       [reduce using rule 43 (expr)]
    $default  reduce using rule 43 (expr)

    binop  go to state 77


State 79

   67 call: params ')' .

    $default  reduce using rule 67 (call)


State 80

   70 params: params ',' . expr

    IDENT          shift, and go to state 46
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '!'            shift, and go to state 22

    expr      go to state 100
    unop      go to state 35
    alloc     go to state 36
    call      go to state 37
    params    go to state 38
    variable  go to state 39
    constant  go to state 40


State 81

   68 call: IDENT '(' ')' .

    $default  reduce using rule 68 (call)


State 82

   42 expr: expr . binop expr
   69 params: IDENT '(' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' IDENT

    TOK_EQ  shift, and go to state 63
    TOK_NE  shift, and go to state 64
    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '['     shift, and go to state 67
    '.'     shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '<'     shift, and go to state 75
    '>'     shift, and go to state 76

    $default  reduce using rule 69 (params)

    binop  go to state 77


State 83

   38 ifelse: TOK_IF '(' expr . ')' statement
   39       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   42 expr: expr . binop expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' IDENT

    TOK_EQ  shift, and go to state 63
    TOK_NE  shift, and go to state 64
    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    ')'     shift, and go to state 101
    '['     shift, and go to state 67
    '.'     shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '<'     shift, and go to state 75
    '>'     shift, and go to state 76

    binop  go to state 77


State 84

   37 while: TOK_WHILE '(' expr . ')' statement
   42 expr: expr . binop expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' IDENT

    TOK_EQ  shift, and go to state 63
    TOK_NE  shift, and go to state 64
    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    ')'     shift, and go to state 102
    '['     shift, and go to state 67
    '.'     shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '<'     shift, and go to state 75
    '>'     shift, and go to state 76

    binop  go to state 77


State 85

   41 return: TOK_RETURN expr ';' .

    $default  reduce using rule 41 (return)


State 86

    8 structdef: TOK_STRUCT IDENT '{' . '}'
    9          | TOK_STRUCT IDENT '{' . structfields '}'

    IDENT       shift, and go to state 92
    TOK_INT     shift, and go to state 9
    TOK_STRING  shift, and go to state 10
    TOK_VOID    shift, and go to state 12
    '}'         shift, and go to state 103

    structfields  go to state 104
    structfield   go to state 105
    plaintype     go to state 106


State 87

   64 alloc: TOK_NEW IDENT '(' . ')'

    ')'  shift, and go to state 107


State 88

   65 alloc: TOK_NEW TOK_STRING '(' . expr ')'

    IDENT          shift, and go to state 46
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '!'            shift, and go to state 22

    expr      go to state 108
    unop      go to state 35
    alloc     go to state 36
    call      go to state 37
    params    go to state 38
    variable  go to state 39
    constant  go to state 40


State 89

   66 alloc: TOK_NEW plaintype '[' . expr ']'

    IDENT          shift, and go to state 46
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '!'            shift, and go to state 22

    expr      go to state 109
    unop      go to state 35
    alloc     go to state 36
    call      go to state 37
    params    go to state 38
    variable  go to state 39
    constant  go to state 40


State 90

   46 expr: '(' expr ')' .

    $default  reduce using rule 46 (expr)


State 91

   24 ident: plaintype TOK_ARRAY IDENT .

    $default  reduce using rule 24 (ident)


State 92

   17 plaintype: IDENT .

    $default  reduce using rule 17 (plaintype)


State 93

   20 function: ident '(' ')' . ';'
   21         | ident '(' ')' . block

    '{'  shift, and go to state 21
    ';'  shift, and go to state 110

    block       go to state 111
    statements  go to state 28


State 94

   18 function: ident '(' idents . ')' block
   19         | ident '(' idents . ')' ';'
   22 idents: idents . ',' ident

    ')'  shift, and go to state 112
    ','  shift, and go to state 113


State 95

   23 idents: ident .

    $default  reduce using rule 23 (idents)


State 96

   36 vardecl: ident '=' expr . ';'
   42 expr: expr . binop expr
   72 variable: expr . '[' expr ']'
   73         | expr . '.' IDENT

    TOK_EQ  shift, and go to state 63
    TOK_NE  shift, and go to state 64
    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '['     shift, and go to state 67
    ';'     shift, and go to state 114
    '.'     shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '<'     shift, and go to state 75
    '>'     shift, and go to state 76

    binop  go to state 77


State 97

   42 expr: expr . binop expr
   72 variable: expr . '[' expr ']'
   72         | expr '[' expr . ']'
   73         | expr . '.' IDENT

    TOK_EQ  shift, and go to state 63
    TOK_NE  shift, and go to state 64
    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '['     shift, and go to state 67
    ']'     shift, and go to state 115
    '.'     shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '<'     shift, and go to state 75
    '>'     shift, and go to state 76

    binop  go to state 77


State 98

   73 variable: expr '.' IDENT .

    $default  reduce using rule 73 (variable)


State 99

   42 expr: expr . binop expr
   42     | expr binop expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' IDENT

    TOK_EQ  shift, and go to state 63
    TOK_NE  shift, and go to state 64
    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '['     shift, and go to state 67
    '.'     shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '<'     shift, and go to state 75
    '>'     shift, and go to state 76

    TOK_EQ    [reduce using rule 42 (expr)]
    TOK_NE    [reduce using rule 42 (expr)]
    TOK_LE    [reduce using rule 42 (expr)]
    TOK_GE    [reduce using rule 42 (expr)]
    '['       [reduce using rule 42 (expr)]
    '.'       [reduce using rule 42 (expr)]
    '='       [reduce using rule 42 (expr)]
    '+'       [reduce using rule 42 (expr)]
    '-'       [reduce using rule 42 (expr)]
    '*'       [reduce using rule 42 (expr)]
    '/'       [reduce using rule 42 (expr)]
    '<'       [reduce using rule 42 (expr)]
    '>'       [reduce using rule 42 (expr)]
    $default  reduce using rule 42 (expr)

    binop  go to state 77


State 100

   42 expr: expr . binop expr
   70 params: params ',' expr .
   72 variable: expr . '[' expr ']'
   73         | expr . '.' IDENT

    TOK_EQ  shift, and go to state 63
    TOK_NE  shift, and go to state 64
    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '['     shift, and go to state 67
    '.'     shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '<'     shift, and go to state 75
    '>'     shift, and go to state 76

    $default  reduce using rule 70 (params)

    binop  go to state 77


State 101

   38 ifelse: TOK_IF '(' expr ')' . statement
   39       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    IDENT          shift, and go to state 5
    TOK_IF         shift, and go to state 6
    TOK_WHILE      shift, and go to state 7
    TOK_RETURN     shift, and go to state 8
    TOK_INT        shift, and go to state 9
    TOK_STRING     shift, and go to state 10
    TOK_VOID       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '{'            shift, and go to state 21
    '!'            shift, and go to state 22

    plaintype   go to state 24
    ident       go to state 55
    block       go to state 27
    statements  go to state 28
    statement   go to state 116
    vardecl     go to state 30
    while       go to state 31
    ifelse      go to state 32
    return      go to state 33
    expr        go to state 34
    unop        go to state 35
    alloc       go to state 36
    call        go to state 37
    params      go to state 38
    variable    go to state 39
    constant    go to state 40


State 102

   37 while: TOK_WHILE '(' expr ')' . statement

    IDENT          shift, and go to state 5
    TOK_IF         shift, and go to state 6
    TOK_WHILE      shift, and go to state 7
    TOK_RETURN     shift, and go to state 8
    TOK_INT        shift, and go to state 9
    TOK_STRING     shift, and go to state 10
    TOK_VOID       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '{'            shift, and go to state 21
    '!'            shift, and go to state 22

    plaintype   go to state 24
    ident       go to state 55
    block       go to state 27
    statements  go to state 28
    statement   go to state 117
    vardecl     go to state 30
    while       go to state 31
    ifelse      go to state 32
    return      go to state 33
    expr        go to state 34
    unop        go to state 35
    alloc       go to state 36
    call        go to state 37
    params      go to state 38
    variable    go to state 39
    constant    go to state 40


State 103

    8 structdef: TOK_STRUCT IDENT '{' '}' .

    $default  reduce using rule 8 (structdef)


State 104

    9 structdef: TOK_STRUCT IDENT '{' structfields . '}'

    '}'  shift, and go to state 118


State 105

   10 structfields: structfield . ';' structfields
   11             | structfield . ';'

    ';'  shift, and go to state 119


State 106

   12 structfield: plaintype . IDENT
   13            | plaintype . TOK_ARRAY IDENT

    IDENT      shift, and go to state 120
    TOK_ARRAY  shift, and go to state 121


State 107

   64 alloc: TOK_NEW IDENT '(' ')' .

    $default  reduce using rule 64 (alloc)


State 108

   42 expr: expr . binop expr
   65 alloc: TOK_NEW TOK_STRING '(' expr . ')'
   72 variable: expr . '[' expr ']'
   73         | expr . '.' IDENT

    TOK_EQ  shift, and go to state 63
    TOK_NE  shift, and go to state 64
    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    ')'     shift, and go to state 122
    '['     shift, and go to state 67
    '.'     shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '<'     shift, and go to state 75
    '>'     shift, and go to state 76

    binop  go to state 77


State 109

   42 expr: expr . binop expr
   66 alloc: TOK_NEW plaintype '[' expr . ']'
   72 variable: expr . '[' expr ']'
   73         | expr . '.' IDENT

    TOK_EQ  shift, and go to state 63
    TOK_NE  shift, and go to state 64
    TOK_LE  shift, and go to state 65
    TOK_GE  shift, and go to state 66
    '['     shift, and go to state 67
    ']'     shift, and go to state 123
    '.'     shift, and go to state 69
    '='     shift, and go to state 70
    '+'     shift, and go to state 71
    '-'     shift, and go to state 72
    '*'     shift, and go to state 73
    '/'     shift, and go to state 74
    '<'     shift, and go to state 75
    '>'     shift, and go to state 76

    binop  go to state 77


State 110

   20 function: ident '(' ')' ';' .

    $default  reduce using rule 20 (function)


State 111

   21 function: ident '(' ')' block .

    $default  reduce using rule 21 (function)


State 112

   18 function: ident '(' idents ')' . block
   19         | ident '(' idents ')' . ';'

    '{'  shift, and go to state 21
    ';'  shift, and go to state 124

    block       go to state 125
    statements  go to state 28


State 113

   22 idents: idents ',' . ident

    IDENT       shift, and go to state 92
    TOK_INT     shift, and go to state 9
    TOK_STRING  shift, and go to state 10
    TOK_VOID    shift, and go to state 12

    plaintype  go to state 24
    ident      go to state 126


State 114

   36 vardecl: ident '=' expr ';' .

    $default  reduce using rule 36 (vardecl)


State 115

   72 variable: expr '[' expr ']' .

    $default  reduce using rule 72 (variable)


State 116

   38 ifelse: TOK_IF '(' expr ')' statement .
   39       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 127

    $default  reduce using rule 38 (ifelse)


State 117

   37 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 37 (while)


State 118

    9 structdef: TOK_STRUCT IDENT '{' structfields '}' .

    $default  reduce using rule 9 (structdef)


State 119

   10 structfields: structfield ';' . structfields
   11             | structfield ';' .

    IDENT       shift, and go to state 92
    TOK_INT     shift, and go to state 9
    TOK_STRING  shift, and go to state 10
    TOK_VOID    shift, and go to state 12

    $default  reduce using rule 11 (structfields)

    structfields  go to state 128
    structfield   go to state 105
    plaintype     go to state 106


State 120

   12 structfield: plaintype IDENT .

    $default  reduce using rule 12 (structfield)


State 121

   13 structfield: plaintype TOK_ARRAY . IDENT

    IDENT  shift, and go to state 129


State 122

   65 alloc: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 65 (alloc)


State 123

   66 alloc: TOK_NEW plaintype '[' expr ']' .

    $default  reduce using rule 66 (alloc)


State 124

   19 function: ident '(' idents ')' ';' .

    $default  reduce using rule 19 (function)


State 125

   18 function: ident '(' idents ')' block .

    $default  reduce using rule 18 (function)


State 126

   22 idents: idents ',' ident .

    $default  reduce using rule 22 (idents)


State 127

   39 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    IDENT          shift, and go to state 5
    TOK_IF         shift, and go to state 6
    TOK_WHILE      shift, and go to state 7
    TOK_RETURN     shift, and go to state 8
    TOK_INT        shift, and go to state 9
    TOK_STRING     shift, and go to state 10
    TOK_VOID       shift, and go to state 12
    TOK_NEW        shift, and go to state 13
    TOK_NULL       shift, and go to state 14
    TOK_POS        shift, and go to state 15
    TOK_NEG        shift, and go to state 16
    TOK_INTCON     shift, and go to state 17
    TOK_CHARCON    shift, and go to state 18
    TOK_STRINGCON  shift, and go to state 19
    '('            shift, and go to state 20
    '{'            shift, and go to state 21
    '!'            shift, and go to state 22

    plaintype   go to state 24
    ident       go to state 55
    block       go to state 27
    statements  go to state 28
    statement   go to state 130
    vardecl     go to state 30
    while       go to state 31
    ifelse      go to state 32
    return      go to state 33
    expr        go to state 34
    unop        go to state 35
    alloc       go to state 36
    call        go to state 37
    params      go to state 38
    variable    go to state 39
    constant    go to state 40


State 128

   10 structfields: structfield ';' structfields .

    $default  reduce using rule 10 (structfields)


State 129

   13 structfield: plaintype TOK_ARRAY IDENT .

    $default  reduce using rule 13 (structfield)


State 130

   39 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 39 (ifelse)
