head	1.12;
access;
symbols;
locks;
comment	@# @;


1.12
date	2018.04.17.23.55.18;	author -;	state -;
branches;
next	1.11;

1.11
date	2018.04.06.20.19.36;	author -;	state -;
branches;
next	1.10;

1.10
date	2018.04.03.22.51.25;	author -;	state -;
branches;
next	1.9;

1.9
date	2018.04.03.21.55.47;	author -;	state -;
branches;
next	1.8;

1.8
date	2018.03.30.17.21.02;	author -;	state -;
branches;
next	1.7;

1.7
date	2018.03.30.17.19.09;	author -;	state -;
branches;
next	1.6;

1.6
date	2018.03.30.00.46.39;	author -;	state -;
branches;
next	1.5;

1.5
date	2018.03.30.00.44.54;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.06.02.23.03.07;	author -;	state -;
branches;
next	1.3;

1.3
date	2012.12.03.21.25.15;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.09.21.02.23.27;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.09.16.01.50.16;	author -;	state -;
branches;
next	;


desc
@@


1.12
log
@-
@
text
@// $Id: 44-dot-product.oc,v 1.11 2018-04-06 13:19:36-07 - - $

#include "oclib.h"

int dot_product (int size, int[] vec1, int[] vec2) {
   int index = 0;
   int dot = 0;
   while (index < size) {
      dot = dot + vec1[index] * vec2[index];
      index = index + 1;
   }
   return dot;
}

#define SIZE 10

int main() {
   int[] vec1 = new int[SIZE];
   int[] vec2 = new int[SIZE];
   int i = 0;
   while (i < SIZE) {
      vec1[i] = i + 10;
      vec2[i] = i * 10;
      i = i + 1;
   }
   putint (dot_product (SIZE, vec1, vec2));
   putchar ('\n');
   return 0;
}

@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: 44-dot-product.oc,v 1.10 2018-04-03 15:51:25-07 - - $
d3 1
a3 1
#include "oclib.oh"
a16 3
int[] vec[SIZE];
int[] vec[SIZE];

d18 2
d28 1
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: 44-dot-product.oc,v 1.9 2018-04-03 14:55:47-07 - - $
d17 2
a18 2
int[] vec1 = new int[SIZE];
int[] vec2 = new int[SIZE];
d27 2
a28 2
   puti (dot_product (SIZE, vec1, vec2));
   putc ('=n');
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: 44-dot-product.oc,v 1.8 2018-03-30 10:21:02-07 - - $
d28 1
a28 1
   endl();
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: 44-dot-product.oc,v 1.7 2018-03-30 10:19:09-07 - - $
d20 1
a20 1
void main() {
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: 44-dot-product.oc,v 1.4 2016-06-02 16:03:07-07 - - $
d28 1
a28 1
   endl ();
@


1.6
log
@-
@
text
@d1 1
a1 1
//()$Id: 44-dot-product.oc,v 1.5 2018-03-29 17:44:54-07 - - $
d3 1
a3 1
#include()"oclib.oh"
d5 9
a13 1
#define()SIZE 10
d15 1
a15 9
int()dot_product (int size, int[] vec1, int[] vec2) {
()  int index = 0;
()  int dot = 0;
()  while (index < size) {
()     dot = dot + vec1[index] * vec2[index];
()     index = index + 1;
()  }
()  return dot;
}
d17 2
a18 2
int[]()vec1 = new int[SIZE];
int[]()vec2 = new int[SIZE];
d20 9
a28 9
void()main() {
()  int i = 0;
()  while (i < SIZE) {
()     vec1[i] = i + 10;
()     vec2[i] = i * 10;
()     i = i + 1;
()  }
()  puti (dot_product (SIZE, vec1, vec2));
()  endl()();
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: 44-dot-product.oc,v 1.4 2016-06-02 16:03:07-07 - - $
d3 1
a3 1
#include "oclib.oh"
d5 1
a5 1
#define SIZE 10
d7 8
a14 8
int dot_product (int size, int[] vec1, int[] vec2) {
   int index = 0;
   int dot = 0;
   while (index < size) {
      dot = dot + vec1[index] * vec2[index];
      index = index + 1;
   }
   return dot;
d17 2
a18 2
int[] vec1 = new int[SIZE];
int[] vec2 = new int[SIZE];
d20 9
a28 9
void main() {
   int i = 0;
   while (i < SIZE) {
      vec1[i] = i + 10;
      vec2[i] = i * 10;
      i = i + 1;
   }
   puti (dot_product (SIZE, vec1, vec2));
   endl ();
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: 44-dot-product.oc,v 1.3 2012-12-03 13:25:15-08 - - $
d5 2
a16 1
#define SIZE 10
d19 10
a28 5
int i = 0;
while (i < SIZE) {
   vec1[i] = i + 10;
   vec2[i] = i * 10;
   i = i + 1;
d30 1
a30 2
puti (dot_product (SIZE, vec1, vec2));
endl ();
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: 44-dot-product.oc,v 1.2 2011-09-20 19:23:27-07 - - $
d22 1
@


1.2
log
@-
@
text
@d1 3
a3 1
// $Id: 44-dot-product.oc,v 1.1 2011-09-15 18:50:16-07 - - $
d23 1
a23 1
puti (dot_product (SIZE, vec1, fec2));
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: 44-dot-product.oc,v 1.1 2011-09-15 15:30:10-07 - - $
d3 1
a3 2
int dot_product (int[] vec1, int[] vec2) {
   assert (vec1.size == vec2.size);
d6 1
a6 1
   while (index < vec1.size) {
d21 1
a21 1
puti (dot_product (vec1, fec2));
@
