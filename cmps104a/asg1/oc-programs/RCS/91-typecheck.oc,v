head	1.7;
access;
symbols;
locks;
comment	@# @;


1.7
date	2018.04.17.23.55.18;	author -;	state -;
branches;
next	1.6;

1.6
date	2018.04.03.21.55.47;	author -;	state -;
branches;
next	1.5;

1.5
date	2018.03.30.17.21.02;	author -;	state -;
branches;
next	1.4;

1.4
date	2018.03.30.17.19.09;	author -;	state -;
branches;
next	1.3;

1.3
date	2018.03.30.00.46.39;	author -;	state -;
branches;
next	1.2;

1.2
date	2018.03.30.00.44.54;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.11.07.20.09.34;	author -;	state -;
branches;
next	;


desc
@@


1.7
log
@-
@
text
@// $Id: 91-typecheck.oc,v 1.6 2018-04-03 14:55:47-07 - - $
//
// This file should scan and parse correctly, 
// but fail to type check, except for the global
// new string, which might be a syntax error
// or a semantic error.
//

int[] a = null;
reference[] a = new string[10];
void foo();
void foo (int a);
void foo (int[] a, int[] b) {int x = a + b;}
struct foo { int a; int b; }

int main() {
   a + b;
   f();
   f (x, y+3, z);
   foo + bar;
   a = b = c = d;
   test = abc + def + ghi;
   this + 23 * a + "hello";
   while (a < b) f = f + 1;
   return 3 + 4;
   a[i] = b[j];
   return;
   while (true) {a = 3; b = 4; }
   if (a == b) f (x);
   if (a != b) y = 3; else f (y, z);
}

@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: 91-typecheck.oc,v 1.5 2018-03-30 10:21:02-07 - - $
d4 3
a6 1
// but fail to type check.
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: 91-typecheck.oc,v 1.4 2018-03-30 10:19:09-07 - - $
d14 1
a14 1
void main() {
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: 91-typecheck.oc,v 1.1 2011-11-07 12:09:34-08 - - $
d9 1
a9 1
void foo ();
d16 1
a16 1
   f ();
@


1.3
log
@-
@
text
@d1 1
a1 1
//()$Id: 91-typecheck.oc,v 1.2 2018-03-29 17:44:54-07 - - $
d3 2
a4 2
//()This file should scan and parse correctly, 
//()but fail to type check.
d7 6
a12 6
int[]()a = null;
reference[]()a = new string[10];
void()foo ();
void()foo (int a);
void()foo (int[] a, int[] b) {int x = a + b;}
struct()foo { int a; int b; }
d14 15
a28 15
void()main() {
()  a + b;
()  f ();
()  f (x, y+3, z);
()  foo + bar;
()  a = b = c = d;
()  test = abc + def + ghi;
()  this + 23 * a + "hello";
()  while (a < b) f = f + 1;
()  return 3 + 4;
()  a[i] = b[j];
()  return;
()  while (true) {a = 3; b = 4; }
()  if (a == b) f (x);
()  if (a != b) y = 3; else f (y, z);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: 91-typecheck.oc,v 1.1 2011-11-07 12:09:34-08 - - $
d3 2
a4 2
// This file should scan and parse correctly, 
// but fail to type check.
d7 6
a12 6
int[] a = null;
reference[] a = new string[10];
void foo ();
void foo (int a);
void foo (int[] a, int[] b) {int x = a + b;}
struct foo { int a; int b; }
d14 15
a28 15
void main() {
   a + b;
   f ();
   f (x, y+3, z);
   foo + bar;
   a = b = c = d;
   test = abc + def + ghi;
   this + 23 * a + "hello";
   while (a < b) f = f + 1;
   return 3 + 4;
   a[i] = b[j];
   return;
   while (true) {a = 3; b = 4; }
   if (a == b) f (x);
   if (a != b) y = 3; else f (y, z);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: 09-junk.oc,v 1.2 2011-09-20 19:23:27-07 - - $
d14 16
a29 14
a + b;
f ();
f (x, y+3, z);
foo + bar;
a = b = c = d;
test = abc + def + ghi;
this + 23 * a + "hello";
while (a < b) f = f + 1;
return 3 + 4;
a[i] = b[j];
return;
while (true) {a = 3; b = 4; }
if (a == b) f (x);
if (a != b) y = 3; else f (y, z);
@
