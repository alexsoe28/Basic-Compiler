head	1.19;
access;
symbols;
locks;
comment	@# @;


1.19
date	2018.05.16.22.40.20;	author -;	state -;
branches;
next	1.18;

1.18
date	2018.04.17.23.55.18;	author -;	state -;
branches;
next	1.17;

1.17
date	2018.04.06.20.18.52;	author -;	state -;
branches;
next	1.16;

1.16
date	2018.04.04.00.26.52;	author -;	state -;
branches;
next	1.15;

1.15
date	2018.04.03.22.51.25;	author -;	state -;
branches;
next	1.14;

1.14
date	2018.04.03.21.55.47;	author -;	state -;
branches;
next	1.13;

1.13
date	2018.04.03.21.55.20;	author -;	state -;
branches;
next	1.12;

1.12
date	2018.03.30.18.08.23;	author -;	state -;
branches;
next	1.11;

1.11
date	2018.03.30.17.21.02;	author -;	state -;
branches;
next	1.10;

1.10
date	2018.03.30.17.19.09;	author -;	state -;
branches;
next	1.9;

1.9
date	2018.03.30.00.46.39;	author -;	state -;
branches;
next	1.8;

1.8
date	2018.03.30.00.44.54;	author -;	state -;
branches;
next	1.7;

1.7
date	2012.12.03.21.24.26;	author -;	state -;
branches;
next	1.6;

1.6
date	2012.12.03.21.16.12;	author -;	state -;
branches;
next	1.5;

1.5
date	2012.11.26.20.49.23;	author -;	state -;
branches;
next	1.4;

1.4
date	2011.10.29.01.24.19;	author -;	state -;
branches;
next	1.3;

1.3
date	2011.09.26.21.22.22;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.09.21.02.23.27;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.09.16.01.50.16;	author -;	state -;
branches;
next	;


desc
@@


1.19
log
@-
@
text
@// $Id: 41-linkedstack.oc,v 1.18 2018-04-17 16:55:18-07 - - $

#include "oclib.h"

struct node {
   string data;
   node link;
}

struct stack {
   node top;
}

bool empty (stack stack) {
   assert (stack != null);
   return stack->top == null;
}

stack new_stack() {
   stack stack = new stack;
   stack->top = null;
   return stack;
}

void push (stack stack, string str) {
   node tmp = new node;
   assert (stack != null);
   tmp->data = str;
   tmp->link = stack->top;
   stack->top = tmp;
}

string pop (stack stack) {
   string tmp = stack->top->data;
   assert (stack != null);
   assert (not empty (stack));
   stack->top = stack->top->link;
   return tmp;
}

int main (int argc, string[] argv) {
   stack stack = new_stack;
   int argi = 0;

   while (argi < argc) {
      push (stack, argv[argi]);
      argi = argi + 1;
   }

   while (not empty (stack)) {
      putstr (pop (stack));
      putchar ('\n');
   }
   return EXIT_SUCCESS;
}

@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.17 2018-04-06 13:18:52-07 - - $
d26 1
a27 1
   node tmp = new node;
d34 1
a36 1
   string tmp = stack->top->data;
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.16 2018-04-03 17:26:52-07 - - $
d3 1
a3 1
#include "oclib.oh"
d54 1
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.15 2018-04-03 15:51:25-07 - - $
d51 2
a52 2
      puts (pop (stack));
      putc ('\n');
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.14 2018-04-03 14:55:47-07 - - $
d20 1
a20 1
   stack stack = new stack();
d27 1
a27 1
   node tmp = new node();
d42 1
a42 1
   stack stack = new_stack();
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.13 2018-04-03 14:55:20-07 - - $
d52 1
a52 1
      endl();
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.12 2018-03-30 11:08:23-07 - - $
d41 1
a41 1
void main (int argc, string[] argv) {
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.11 2018-03-30 10:21:02-07 - - $
d35 1
a35 1
   assert (! empty (stack));
d50 1
a50 1
   while (! empty (stack)) {
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.10 2018-03-30 10:19:09-07 - - $
d16 1
a16 1
   return stack.top == null;
d21 1
a21 1
   stack.top = null;
d28 3
a30 3
   tmp.data = str;
   tmp.link = stack.top;
   stack.top = tmp;
d36 2
a37 2
   string tmp = stack.top.data;
   stack.top = stack.top.link;
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.7 2012-12-03 13:24:26-08 - - $
d19 2
a20 2
stack new_stack () {
   stack stack = new stack ();
d27 1
a27 1
   node tmp = new node ();
d42 1
a42 1
   stack stack = new_stack ();
@


1.9
log
@-
@
text
@d1 1
a1 1
//()$Id: 41-linkedstack.oc,v 1.8 2018-03-29 17:44:54-07 - - $
d3 1
a3 1
#include()"oclib.oh"
d5 3
a7 3
struct()node {
()  string data;
()  node link;
d10 2
a11 2
struct()stack {
()  node top;
d14 3
a16 3
bool()empty (stack stack) {
()  assert (stack != null);
()  return stack->top == null;
d19 4
a22 4
stack()new_stack () {
()  stack stack = new stack ();
()  stack->top = null;
()  return stack;
d25 6
a30 6
void()push (stack stack, string str) {
()  assert (stack != null);
()  node tmp = new node ();
()  tmp->data = str;
()  tmp->link = stack->top;
()  stack->top = tmp;
d33 6
a38 6
string()pop (stack stack) {
()  assert (stack != null);
()  assert (! empty (stack));
()  string tmp = stack->top->data;
()  stack->top = stack->top->link;
()  return tmp;
d41 3
a43 3
void()main (int argc, string[] argv) {
()  stack stack = new_stack ();
()  int argi = 0;
d45 4
a48 4
()  while (argi < argc) {
()     push (stack, argv[argi]);
()     argi = argi + 1;
()  }
d50 4
a53 4
()  while (! empty (stack)) {
()     puts (pop (stack));
()     endl()();
()  }
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.7 2012-12-03 13:24:26-08 - - $
d3 1
a3 1
#include "oclib.oh"
d5 3
a7 3
struct node {
   string data;
   node link;
d10 2
a11 2
struct stack {
   node top;
d14 3
a16 3
bool empty (stack stack) {
   assert (stack != null);
   return stack->top == null;
d19 4
a22 4
stack new_stack () {
   stack stack = new stack ();
   stack->top = null;
   return stack;
d25 6
a30 6
void push (stack stack, string str) {
   assert (stack != null);
   node tmp = new node ();
   tmp->data = str;
   tmp->link = stack->top;
   stack->top = tmp;
d33 6
a38 6
string pop (stack stack) {
   assert (stack != null);
   assert (! empty (stack));
   string tmp = stack->top->data;
   stack->top = stack->top->link;
   return tmp;
d41 3
a43 3
void main (int argc, string[] argv) {
   stack stack = new_stack ();
   int argi = 0;
d45 4
a48 4
   while (argi < argc) {
      push (stack, argv[argi]);
      argi = argi + 1;
   }
d50 4
a53 4
   while (! empty (stack)) {
      puts (pop (stack));
      endl ();
   }
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.6 2012-12-03 13:16:12-08 - - $
d16 1
a16 1
   return stack.top == null;
d21 1
a21 1
   stack.top = null;
d28 3
a30 3
   tmp.data = str;
   tmp.link = stack.top;
   stack.top = tmp;
d36 2
a37 2
   string tmp = stack.top.data;
   stack.top = stack.top.link;
d41 13
a53 14
// Main program.

string[] argv = getargv ();
stack stack = new_stack ();
int argi = 0;

while (argv[argi] != null) {
   push (stack, argv[argi]);
   argi = argi + 1;
}

while (! empty (stack)) {
   puts (pop (stack));
   endl ();
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.5 2012-11-26 12:49:23-08 - - $
d19 1
a19 1
stack new_stack (int size) {
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.4 2011-10-28 18:24:19-07 - - $
d14 5
a40 5
bool empty (stack stack) {
   assert (stack != null);
   return stack.top == null;
}

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.3 2011-09-26 14:22:22-07 - - $
a4 4
struct stack {
   node top;
}

d10 4
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.2 2011-09-20 19:23:27-07 - - $
d52 1
a52 1
while (! empty (stack) {
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.1 2011-09-15 18:50:16-07 - - $
d43 1
a43 1
string[] oc_argv = argv ();
d47 2
a48 2
while (argi < oc_argv.size) {
   push (stack, oc_argv[argi]);
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: 41-linkedstack.oc,v 1.2 2011-09-15 18:45:15-07 - - $
d15 3
a17 3
   stack stack_ = new stack ();
   stack_.top = null;
   return stack_;
d20 2
a21 2
void push (stack stack_, string str) {
   assert (stack_ != null);
d24 2
a25 2
   tmp.link = stack_.top;
   stack_.top = tmp;
d28 5
a32 5
string pop (stack stack_) {
   assert (stack_ != null);
   assert (! empty (stack_));
   string tmp = stack_.top.data;
   stack_.top = stack_.top.link;
d36 3
a38 3
bool empty (stack stack_) {
   assert (stack_ != null);
   return stack_.top == null;
d44 1
a44 1
stack stack_ = new_stack ();
d48 1
a48 1
   push (stack_, oc_argv[argi]);
d52 2
a53 2
while (! empty (stack_) {
   puts (pop (stack_));
@
